package ru.itmo.wp.model.repository;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Thing;
import ru.itmo.wp.model.exception.RepositoryException;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BaseRepository<T> {
    private final String className;
    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    public BaseRepository(String className) {
        this.className = className;
    }

    public T find(long id) {
        return findBy(
                "SELECT * FROM " + className + " WHERE id=?",
                new Object[]{id}
        );
    }

    public T findBy(String sql, Object[] data) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                getStatement(statement, data);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toThing(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
    }

    public List<T> findAllBy(String sql, Object[] data) {
        List<T> things = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                if (data != null) {
                    getStatement(statement, data);
                }
                try (ResultSet resultSet = statement.executeQuery()) {
                    T thing;
                    while ((thing = toThing(statement.getMetaData(), resultSet)) != null) {
                        things.add(thing);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + className + ".", e);
        }
        return things;
    }

    public long findCount() {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT COUNT(id) FROM " + className)) {
                try (ResultSet resultSet = statement.executeQuery()) {
                    resultSet.first();
                    return resultSet.getByte(1);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find " + className + ".", e);
        }
    }

    protected abstract T toThing(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException;

    public void saveThing(T thing, String sql, Object[] data) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
                getStatement(statement, data);
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save " + className + ".");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        setIdAndTime((Thing) thing, generatedKeys);
                    } else {
                        throw new RepositoryException("Can't save " + className + " [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save " + className + ".", e);
        }
    }

    public void setIdAndTime(Thing thing, ResultSet generatedKeys) throws SQLException {
        thing.setId(generatedKeys.getLong(1));
        thing.setCreationTime(((Thing) find(thing.getId())).getCreationTime());
    }

    public void getStatement(PreparedStatement statement, Object[] data) throws SQLException {
        int pos = 1;
        for (Object obj : data) {
            if (obj instanceof String) {
                statement.setString(pos++, (String) obj);
            } else if (obj instanceof Long) {
                statement.setLong(pos++, (long) obj);
            } else if (obj instanceof Boolean) {
                statement.setBoolean(pos++, (boolean) obj);
            } else {
                throw new RepositoryException("Can't get statement.");
            }
        }
    }
}