// Generated from Grammar.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var GrammarListener = require('./GrammarListener').GrammarListener;
var GrammarVisitor = require('./GrammarVisitor').GrammarVisitor;

var grammarFileName = "Grammar.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003_\u030c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0003\u0002\u0005\u0002\u00a4\n\u0002\u0003",
    "\u0002\u0007\u0002\u00a7\n\u0002\f\u0002\u000e\u0002\u00aa\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00b6\n",
    "\u0005\u0003\u0006\u0003\u0006\u0005\u0006\u00ba\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u00bf\n\u0006\u0007\u0006\u00c1",
    "\n\u0006\f\u0006\u000e\u0006\u00c4\u000b\u0006\u0003\u0007\u0003\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0005\b\u00d1\n\b\u0003\t\u0003\t\u0006\t\u00d5\n\t\r\t\u000e\t\u00d6",
    "\u0003\n\u0003\n\u0005\n\u00db\n\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u00e1\n\u000b\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0007\r\u00e8\n\r\f\r\u000e\r\u00eb\u000b\r\u0003\r\u0003",
    "\r\u0007\r\u00ef\n\r\f\r\u000e\r\u00f2\u000b\r\u0003\u000e\u0003\u000e",
    "\u0005\u000e\u00f6\n\u000e\u0003\u000f\u0003\u000f\u0005\u000f\u00fa",
    "\n\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "\u0100\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u0108\n\u0011\f\u0011\u000e\u0011\u010b",
    "\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0110\n",
    "\u0012\f\u0012\u000e\u0012\u0113\u000b\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015",
    "\u0005\u0015\u011d\n\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005",
    "\u0015\u0122\n\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0007\u0016",
    "\u0127\n\u0016\f\u0016\u000e\u0016\u012a\u000b\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0005\u0016\u012f\n\u0016\u0003\u0016\u0005\u0016",
    "\u0132\n\u0016\u0003\u0016\u0005\u0016\u0135\n\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0142\n\u0019",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u0147\n\u001a\f\u001a",
    "\u000e\u001a\u014a\u000b\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0007",
    "\u001d\u0155\n\u001d\f\u001d\u000e\u001d\u0158\u000b\u001d\u0003\u001e",
    "\u0003\u001e\u0007\u001e\u015c\n\u001e\f\u001e\u000e\u001e\u015f\u000b",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u0167\n\u001f\u0003 \u0007 \u016a\n \f \u000e \u016d",
    "\u000b \u0003 \u0003 \u0005 \u0171\n \u0003 \u0003 \u0003 \u0003!\u0003",
    "!\u0003\"\u0003\"\u0003\"\u0007\"\u017b\n\"\f\"\u000e\"\u017e\u000b",
    "\"\u0003#\u0003#\u0003#\u0005#\u0183\n#\u0003$\u0003$\u0005$\u0187\n",
    "$\u0003%\u0003%\u0003%\u0005%\u018c\n%\u0003&\u0007&\u018f\n&\f&\u000e",
    "&\u0192\u000b&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003(\u0003",
    "(\u0005(\u019c\n(\u0003(\u0003(\u0003(\u0003(\u0005(\u01a2\n(\u0005",
    "(\u01a4\n(\u0003)\u0003)\u0003)\u0003)\u0005)\u01aa\n)\u0003*\u0003",
    "*\u0003*\u0005*\u01af\n*\u0003*\u0003*\u0005*\u01b3\n*\u0003+\u0003",
    "+\u0003+\u0007+\u01b8\n+\f+\u000e+\u01bb\u000b+\u0003,\u0007,\u01be",
    "\n,\f,\u000e,\u01c1\u000b,\u0003,\u0003,\u0005,\u01c5\n,\u0003,\u0003",
    ",\u0003-\u0003-\u0003.\u0003.\u0003.\u0003/\u0003/\u0003/\u0007/\u01d1",
    "\n/\f/\u000e/\u01d4\u000b/\u00030\u00030\u00050\u01d8\n0\u00031\u0003",
    "1\u00051\u01dc\n1\u00032\u00072\u01df\n2\f2\u000e2\u01e2\u000b2\u0003",
    "2\u00032\u00052\u01e6\n2\u00032\u00032\u00033\u00033\u00034\u00054\u01ed",
    "\n4\u00034\u00034\u00034\u00054\u01f2\n4\u00034\u00034\u00035\u0003",
    "5\u00055\u01f8\n5\u00035\u00075\u01fb\n5\f5\u000e5\u01fe\u000b5\u0003",
    "5\u00035\u00036\u00056\u0203\n6\u00036\u00036\u00036\u00056\u0208\n",
    "6\u00036\u00036\u00036\u00037\u00037\u00037\u00057\u0210\n7\u00057\u0212",
    "\n7\u00037\u00037\u00038\u00038\u00038\u00078\u0219\n8\f8\u000e8\u021c",
    "\u000b8\u00039\u00039\u00079\u0220\n9\f9\u000e9\u0223\u000b9\u00039",
    "\u00039\u0003:\u0007:\u0228\n:\f:\u000e:\u022b\u000b:\u0003:\u0003:",
    "\u0005:\u022f\n:\u0003:\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003",
    ";\u0003;\u0005;\u023a\n;\u0003<\u0003<\u0003<\u0003<\u0005<\u0240\n",
    "<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003>\u0005>\u0248\n>\u0003?\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u0251\n?\u0003?\u0003?\u0003",
    "?\u0005?\u0256\n?\u0005?\u0258\n?\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0005@\u0261\n@\u0003A\u0003A\u0003A\u0003A\u0005A\u0267",
    "\nA\u0003A\u0005A\u026a\nA\u0003A\u0003A\u0005A\u026e\nA\u0003A\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003D\u0003D\u0005",
    "D\u027b\nD\u0003D\u0003D\u0003E\u0003E\u0003E\u0005E\u0282\nE\u0003",
    "F\u0003F\u0003F\u0005F\u0287\nF\u0003F\u0003F\u0003F\u0003F\u0003F\u0005",
    "F\u028e\nF\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0003G\u0005G\u029b\nG\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0007H\u02a6\nH\fH\u000eH\u02a9\u000bH\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0007I\u02b1\nI\fI\u000eI\u02b4",
    "\u000bI\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0007J\u02bc\nJ\f",
    "J\u000eJ\u02bf\u000bJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0007",
    "K\u02c7\nK\fK\u000eK\u02ca\u000bK\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0003L\u0007L\u02d2\nL\fL\u000eL\u02d5\u000bL\u0003M\u0003M\u0003",
    "M\u0003M\u0003M\u0003M\u0007M\u02dd\nM\fM\u000eM\u02e0\u000bM\u0003",
    "N\u0003N\u0003N\u0005N\u02e5\nN\u0003O\u0003O\u0005O\u02e9\nO\u0003",
    "O\u0003O\u0005O\u02ed\nO\u0003O\u0003O\u0003O\u0003O\u0005O\u02f3\n",
    "O\u0003P\u0003P\u0003P\u0005P\u02f8\nP\u0003P\u0003P\u0003Q\u0003Q\u0005",
    "Q\u02fe\nQ\u0003Q\u0003Q\u0005Q\u0302\nQ\u0003Q\u0003Q\u0005Q\u0306",
    "\nQ\u0003Q\u0003Q\u0005Q\u030a\nQ\u0003Q\u0002\t \u008e\u0090\u0092",
    "\u0094\u0096\u0098R\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014",
    "\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd",
    "fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090",
    "\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u0002\u0010\u0004\u0002",
    "##8;\n\u0002\u0005\u0005\u0007\u0007\n\n\u0010\u0010\u0016\u0016\u001d",
    "\u001d\u001f\u001f))\u0004\u000277<<\u0003\u0002<=\u0006\u0002\u0003",
    "\u0003\u0014\u0014%\'**\u0007\u0002\u0014\u0014%\'**2255\b\u0002\u0003",
    "\u0003\u0014\u0014!!%\'**--\u0003\u0002%\'\u0004\u0002++..\u0003\u0002",
    "X]\u0003\u0002MN\u0003\u0002OQ\u0004\u0002MN^^\u0003\u0002RS\u0002\u032d",
    "\u0002\u00a3\u0003\u0002\u0002\u0002\u0004\u00ae\u0003\u0002\u0002\u0002",
    "\u0006\u00b0\u0003\u0002\u0002\u0002\b\u00b5\u0003\u0002\u0002\u0002",
    "\n\u00b7\u0003\u0002\u0002\u0002\f\u00c5\u0003\u0002\u0002\u0002\u000e",
    "\u00d0\u0003\u0002\u0002\u0002\u0010\u00d4\u0003\u0002\u0002\u0002\u0012",
    "\u00d8\u0003\u0002\u0002\u0002\u0014\u00e0\u0003\u0002\u0002\u0002\u0016",
    "\u00e2\u0003\u0002\u0002\u0002\u0018\u00e9\u0003\u0002\u0002\u0002\u001a",
    "\u00f5\u0003\u0002\u0002\u0002\u001c\u00f7\u0003\u0002\u0002\u0002\u001e",
    "\u00ff\u0003\u0002\u0002\u0002 \u0101\u0003\u0002\u0002\u0002\"\u010c",
    "\u0003\u0002\u0002\u0002$\u0114\u0003\u0002\u0002\u0002&\u0116\u0003",
    "\u0002\u0002\u0002(\u011a\u0003\u0002\u0002\u0002*\u0128\u0003\u0002",
    "\u0002\u0002,\u0138\u0003\u0002\u0002\u0002.\u013a\u0003\u0002\u0002",
    "\u00020\u0141\u0003\u0002\u0002\u00022\u0143\u0003\u0002\u0002\u0002",
    "4\u014b\u0003\u0002\u0002\u00026\u014e\u0003\u0002\u0002\u00028\u0151",
    "\u0003\u0002\u0002\u0002:\u0159\u0003\u0002\u0002\u0002<\u0166\u0003",
    "\u0002\u0002\u0002>\u016b\u0003\u0002\u0002\u0002@\u0175\u0003\u0002",
    "\u0002\u0002B\u0177\u0003\u0002\u0002\u0002D\u017f\u0003\u0002\u0002",
    "\u0002F\u0184\u0003\u0002\u0002\u0002H\u018b\u0003\u0002\u0002\u0002",
    "J\u0190\u0003\u0002\u0002\u0002L\u0196\u0003\u0002\u0002\u0002N\u01a3",
    "\u0003\u0002\u0002\u0002P\u01a9\u0003\u0002\u0002\u0002R\u01ab\u0003",
    "\u0002\u0002\u0002T\u01b4\u0003\u0002\u0002\u0002V\u01bf\u0003\u0002",
    "\u0002\u0002X\u01c8\u0003\u0002\u0002\u0002Z\u01ca\u0003\u0002\u0002",
    "\u0002\\\u01cd\u0003\u0002\u0002\u0002^\u01d7\u0003\u0002\u0002\u0002",
    "`\u01db\u0003\u0002\u0002\u0002b\u01e0\u0003\u0002\u0002\u0002d\u01e9",
    "\u0003\u0002\u0002\u0002f\u01ec\u0003\u0002\u0002\u0002h\u01f5\u0003",
    "\u0002\u0002\u0002j\u0202\u0003\u0002\u0002\u0002l\u020c\u0003\u0002",
    "\u0002\u0002n\u0215\u0003\u0002\u0002\u0002p\u021d\u0003\u0002\u0002",
    "\u0002r\u0229\u0003\u0002\u0002\u0002t\u0239\u0003\u0002\u0002\u0002",
    "v\u023f\u0003\u0002\u0002\u0002x\u0241\u0003\u0002\u0002\u0002z\u0247",
    "\u0003\u0002\u0002\u0002|\u0249\u0003\u0002\u0002\u0002~\u0259\u0003",
    "\u0002\u0002\u0002\u0080\u0262\u0003\u0002\u0002\u0002\u0082\u0272\u0003",
    "\u0002\u0002\u0002\u0084\u0275\u0003\u0002\u0002\u0002\u0086\u0278\u0003",
    "\u0002\u0002\u0002\u0088\u0281\u0003\u0002\u0002\u0002\u008a\u028d\u0003",
    "\u0002\u0002\u0002\u008c\u029a\u0003\u0002\u0002\u0002\u008e\u029c\u0003",
    "\u0002\u0002\u0002\u0090\u02aa\u0003\u0002\u0002\u0002\u0092\u02b5\u0003",
    "\u0002\u0002\u0002\u0094\u02c0\u0003\u0002\u0002\u0002\u0096\u02cb\u0003",
    "\u0002\u0002\u0002\u0098\u02d6\u0003\u0002\u0002\u0002\u009a\u02e4\u0003",
    "\u0002\u0002\u0002\u009c\u02f2\u0003\u0002\u0002\u0002\u009e\u02f4\u0003",
    "\u0002\u0002\u0002\u00a0\u02fb\u0003\u0002\u0002\u0002\u00a2\u00a4\u0005",
    "&\u0014\u0002\u00a3\u00a2\u0003\u0002\u0002\u0002\u00a3\u00a4\u0003",
    "\u0002\u0002\u0002\u00a4\u00a8\u0003\u0002\u0002\u0002\u00a5\u00a7\u0005",
    "(\u0015\u0002\u00a6\u00a5\u0003\u0002\u0002\u0002\u00a7\u00aa\u0003",
    "\u0002\u0002\u0002\u00a8\u00a6\u0003\u0002\u0002\u0002\u00a8\u00a9\u0003",
    "\u0002\u0002\u0002\u00a9\u00ab\u0003\u0002\u0002\u0002\u00aa\u00a8\u0003",
    "\u0002\u0002\u0002\u00ab\u00ac\u0005*\u0016\u0002\u00ac\u00ad\u0007",
    "\u0002\u0002\u0003\u00ad\u0003\u0003\u0002\u0002\u0002\u00ae\u00af\t",
    "\u0002\u0002\u0002\u00af\u0005\u0003\u0002\u0002\u0002\u00b0\u00b1\t",
    "\u0003\u0002\u0002\u00b1\u0007\u0003\u0002\u0002\u0002\u00b2\u00b6\u0005",
    "\n\u0006\u0002\u00b3\u00b6\u0005\f\u0007\u0002\u00b4\u00b6\u0005\u000e",
    "\b\u0002\u00b5\u00b2\u0003\u0002\u0002\u0002\u00b5\u00b3\u0003\u0002",
    "\u0002\u0002\u00b5\u00b4\u0003\u0002\u0002\u0002\u00b6\t\u0003\u0002",
    "\u0002\u0002\u00b7\u00b9\u0007<\u0002\u0002\u00b8\u00ba\u0005\u0016",
    "\f\u0002\u00b9\u00b8\u0003\u0002\u0002\u0002\u00b9\u00ba\u0003\u0002",
    "\u0002\u0002\u00ba\u00c2\u0003\u0002\u0002\u0002\u00bb\u00bc\u0007A",
    "\u0002\u0002\u00bc\u00be\u0007<\u0002\u0002\u00bd\u00bf\u0005\u0016",
    "\f\u0002\u00be\u00bd\u0003\u0002\u0002\u0002\u00be\u00bf\u0003\u0002",
    "\u0002\u0002\u00bf\u00c1\u0003\u0002\u0002\u0002\u00c0\u00bb\u0003\u0002",
    "\u0002\u0002\u00c1\u00c4\u0003\u0002\u0002\u0002\u00c2\u00c0\u0003\u0002",
    "\u0002\u0002\u00c2\u00c3\u0003\u0002\u0002\u0002\u00c3\u000b\u0003\u0002",
    "\u0002\u0002\u00c4\u00c2\u0003\u0002\u0002\u0002\u00c5\u00c6\t\u0004",
    "\u0002\u0002\u00c6\r\u0003\u0002\u0002\u0002\u00c7\u00c8\u0005\u0006",
    "\u0004\u0002\u00c8\u00c9\u0005\u0010\t\u0002\u00c9\u00d1\u0003\u0002",
    "\u0002\u0002\u00ca\u00cb\u0005\n\u0006\u0002\u00cb\u00cc\u0005\u0010",
    "\t\u0002\u00cc\u00d1\u0003\u0002\u0002\u0002\u00cd\u00ce\u0005\f\u0007",
    "\u0002\u00ce\u00cf\u0005\u0010\t\u0002\u00cf\u00d1\u0003\u0002\u0002",
    "\u0002\u00d0\u00c7\u0003\u0002\u0002\u0002\u00d0\u00ca\u0003\u0002\u0002",
    "\u0002\u00d0\u00cd\u0003\u0002\u0002\u0002\u00d1\u000f\u0003\u0002\u0002",
    "\u0002\u00d2\u00d3\u0007G\u0002\u0002\u00d3\u00d5\u0007H\u0002\u0002",
    "\u00d4\u00d2\u0003\u0002\u0002\u0002\u00d5\u00d6\u0003\u0002\u0002\u0002",
    "\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002",
    "\u00d7\u0011\u0003\u0002\u0002\u0002\u00d8\u00da\u0007=\u0002\u0002",
    "\u00d9\u00db\u0005\u0014\u000b\u0002\u00da\u00d9\u0003\u0002\u0002\u0002",
    "\u00da\u00db\u0003\u0002\u0002\u0002\u00db\u0013\u0003\u0002\u0002\u0002",
    "\u00dc\u00dd\u0007\u0013\u0002\u0002\u00dd\u00e1\u0005\f\u0007\u0002",
    "\u00de\u00df\u0007\u0013\u0002\u0002\u00df\u00e1\u0005\n\u0006\u0002",
    "\u00e0\u00dc\u0003\u0002\u0002\u0002\u00e0\u00de\u0003\u0002\u0002\u0002",
    "\u00e1\u0015\u0003\u0002\u0002\u0002\u00e2\u00e3\u0007X\u0002\u0002",
    "\u00e3\u00e4\u0005\u0018\r\u0002\u00e4\u00e5\u0007Y\u0002\u0002\u00e5",
    "\u0017\u0003\u0002\u0002\u0002\u00e6\u00e8\u0005\u001a\u000e\u0002\u00e7",
    "\u00e6\u0003\u0002\u0002\u0002\u00e8\u00eb\u0003\u0002\u0002\u0002\u00e9",
    "\u00e7\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea",
    "\u00f0\u0003\u0002\u0002\u0002\u00eb\u00e9\u0003\u0002\u0002\u0002\u00ec",
    "\u00ed\u0007B\u0002\u0002\u00ed\u00ef\u0005\u001a\u000e\u0002\u00ee",
    "\u00ec\u0003\u0002\u0002\u0002\u00ef\u00f2\u0003\u0002\u0002\u0002\u00f0",
    "\u00ee\u0003\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1",
    "\u0019\u0003\u0002\u0002\u0002\u00f2\u00f0\u0003\u0002\u0002\u0002\u00f3",
    "\u00f6\u0005\b\u0005\u0002\u00f4\u00f6\u0005\u001c\u000f\u0002\u00f5",
    "\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f4\u0003\u0002\u0002\u0002\u00f6",
    "\u001b\u0003\u0002\u0002\u0002\u00f7\u00f9\u0007=\u0002\u0002\u00f8",
    "\u00fa\u0005\u001e\u0010\u0002\u00f9\u00f8\u0003\u0002\u0002\u0002\u00f9",
    "\u00fa\u0003\u0002\u0002\u0002\u00fa\u001d\u0003\u0002\u0002\u0002\u00fb",
    "\u00fc\u0007\u0013\u0002\u0002\u00fc\u0100\u0005\b\u0005\u0002\u00fd",
    "\u00fe\u0007+\u0002\u0002\u00fe\u0100\u0005\b\u0005\u0002\u00ff\u00fb",
    "\u0003\u0002\u0002\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u0100\u001f",
    "\u0003\u0002\u0002\u0002\u0101\u0102\b\u0011\u0001\u0002\u0102\u0103",
    "\t\u0005\u0002\u0002\u0103\u0109\u0003\u0002\u0002\u0002\u0104\u0105",
    "\f\u0003\u0002\u0002\u0105\u0106\u0007A\u0002\u0002\u0106\u0108\t\u0005",
    "\u0002\u0002\u0107\u0104\u0003\u0002\u0002\u0002\u0108\u010b\u0003\u0002",
    "\u0002\u0002\u0109\u0107\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002",
    "\u0002\u0002\u010a!\u0003\u0002\u0002\u0002\u010b\u0109\u0003\u0002",
    "\u0002\u0002\u010c\u0111\u0005\u0088E\u0002\u010d\u010e\u0007B\u0002",
    "\u0002\u010e\u0110\u0005\u0088E\u0002\u010f\u010d\u0003\u0002\u0002",
    "\u0002\u0110\u0113\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002",
    "\u0002\u0111\u0112\u0003\u0002\u0002\u0002\u0112#\u0003\u0002\u0002",
    "\u0002\u0113\u0111\u0003\u0002\u0002\u0002\u0114\u0115\u0007=\u0002",
    "\u0002\u0115%\u0003\u0002\u0002\u0002\u0116\u0117\u0007$\u0002\u0002",
    "\u0117\u0118\u0005 \u0011\u0002\u0118\u0119\u0007J\u0002\u0002\u0119",
    "\'\u0003\u0002\u0002\u0002\u011a\u011c\u0007\u001b\u0002\u0002\u011b",
    "\u011d\u0007*\u0002\u0002\u011c\u011b\u0003\u0002\u0002\u0002\u011c",
    "\u011d\u0003\u0002\u0002\u0002\u011d\u011e\u0003\u0002\u0002\u0002\u011e",
    "\u0121\u0005 \u0011\u0002\u011f\u0120\u0007A\u0002\u0002\u0120\u0122",
    "\u0007P\u0002\u0002\u0121\u011f\u0003\u0002\u0002\u0002\u0121\u0122",
    "\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123\u0124",
    "\u0007J\u0002\u0002\u0124)\u0003\u0002\u0002\u0002\u0125\u0127\u0005",
    ",\u0017\u0002\u0126\u0125\u0003\u0002\u0002\u0002\u0127\u012a\u0003",
    "\u0002\u0002\u0002\u0128\u0126\u0003\u0002\u0002\u0002\u0128\u0129\u0003",
    "\u0002\u0002\u0002\u0129\u012b\u0003\u0002\u0002\u0002\u012a\u0128\u0003",
    "\u0002\u0002\u0002\u012b\u012c\u0007\u000b\u0002\u0002\u012c\u012e\u0007",
    "<\u0002\u0002\u012d\u012f\u0005.\u0018\u0002\u012e\u012d\u0003\u0002",
    "\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f\u0131\u0003\u0002",
    "\u0002\u0002\u0130\u0132\u00054\u001b\u0002\u0131\u0130\u0003\u0002",
    "\u0002\u0002\u0131\u0132\u0003\u0002\u0002\u0002\u0132\u0134\u0003\u0002",
    "\u0002\u0002\u0133\u0135\u00056\u001c\u0002\u0134\u0133\u0003\u0002",
    "\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002",
    "\u0002\u0002\u0136\u0137\u0005:\u001e\u0002\u0137+\u0003\u0002\u0002",
    "\u0002\u0138\u0139\t\u0006\u0002\u0002\u0139-\u0003\u0002\u0002\u0002",
    "\u013a\u013b\u0007X\u0002\u0002\u013b\u013c\u00052\u001a\u0002\u013c",
    "\u013d\u0007Y\u0002\u0002\u013d/\u0003\u0002\u0002\u0002\u013e\u0142",
    "\u0005.\u0018\u0002\u013f\u0140\u0007X\u0002\u0002\u0140\u0142\u0007",
    "Y\u0002\u0002\u0141\u013e\u0003\u0002\u0002\u0002\u0141\u013f\u0003",
    "\u0002\u0002\u0002\u01421\u0003\u0002\u0002\u0002\u0143\u0148\u0005",
    "\u0012\n\u0002\u0144\u0145\u0007B\u0002\u0002\u0145\u0147\u0005\u0012",
    "\n\u0002\u0146\u0144\u0003\u0002\u0002\u0002\u0147\u014a\u0003\u0002",
    "\u0002\u0002\u0148\u0146\u0003\u0002\u0002\u0002\u0148\u0149\u0003\u0002",
    "\u0002\u0002\u01493\u0003\u0002\u0002\u0002\u014a\u0148\u0003\u0002",
    "\u0002\u0002\u014b\u014c\u0007\u0013\u0002\u0002\u014c\u014d\u0005\n",
    "\u0006\u0002\u014d5\u0003\u0002\u0002\u0002\u014e\u014f\u0007\u001a",
    "\u0002\u0002\u014f\u0150\u00058\u001d\u0002\u01507\u0003\u0002\u0002",
    "\u0002\u0151\u0156\u0005\n\u0006\u0002\u0152\u0153\u0007B\u0002\u0002",
    "\u0153\u0155\u0005\n\u0006\u0002\u0154\u0152\u0003\u0002\u0002\u0002",
    "\u0155\u0158\u0003\u0002\u0002\u0002\u0156\u0154\u0003\u0002\u0002\u0002",
    "\u0156\u0157\u0003\u0002\u0002\u0002\u01579\u0003\u0002\u0002\u0002",
    "\u0158\u0156\u0003\u0002\u0002\u0002\u0159\u015d\u0007E\u0002\u0002",
    "\u015a\u015c\u0005<\u001f\u0002\u015b\u015a\u0003\u0002\u0002\u0002",
    "\u015c\u015f\u0003\u0002\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002",
    "\u015d\u015e\u0003\u0002\u0002\u0002\u015e\u0160\u0003\u0002\u0002\u0002",
    "\u015f\u015d\u0003\u0002\u0002\u0002\u0160\u0161\u0007F\u0002\u0002",
    "\u0161;\u0003\u0002\u0002\u0002\u0162\u0167\u0005> \u0002\u0163\u0167",
    "\u0005J&\u0002\u0164\u0167\u0005b2\u0002\u0165\u0167\u0005*\u0016\u0002",
    "\u0166\u0162\u0003\u0002\u0002\u0002\u0166\u0163\u0003\u0002\u0002\u0002",
    "\u0166\u0164\u0003\u0002\u0002\u0002\u0166\u0165\u0003\u0002\u0002\u0002",
    "\u0167=\u0003\u0002\u0002\u0002\u0168\u016a\u0005@!\u0002\u0169\u0168",
    "\u0003\u0002\u0002\u0002\u016a\u016d\u0003\u0002\u0002\u0002\u016b\u0169",
    "\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002\u016c\u0170",
    "\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002\u0002\u016e\u0171",
    "\u0005\u0006\u0004\u0002\u016f\u0171\u0005\b\u0005\u0002\u0170\u016e",
    "\u0003\u0002\u0002\u0002\u0170\u016f\u0003\u0002\u0002\u0002\u0171\u0172",
    "\u0003\u0002\u0002\u0002\u0172\u0173\u0005B\"\u0002\u0173\u0174\u0007",
    "J\u0002\u0002\u0174?\u0003\u0002\u0002\u0002\u0175\u0176\t\u0007\u0002",
    "\u0002\u0176A\u0003\u0002\u0002\u0002\u0177\u017c\u0005D#\u0002\u0178",
    "\u0179\u0007B\u0002\u0002\u0179\u017b\u0005D#\u0002\u017a\u0178\u0003",
    "\u0002\u0002\u0002\u017b\u017e\u0003\u0002\u0002\u0002\u017c\u017a\u0003",
    "\u0002\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002\u017dC\u0003",
    "\u0002\u0002\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017f\u0182\u0005",
    "F$\u0002\u0180\u0181\u0007K\u0002\u0002\u0181\u0183\u0005H%\u0002\u0182",
    "\u0180\u0003\u0002\u0002\u0002\u0182\u0183\u0003\u0002\u0002\u0002\u0183",
    "E\u0003\u0002\u0002\u0002\u0184\u0186\u0007=\u0002\u0002\u0185\u0187",
    "\u0005\u0010\t\u0002\u0186\u0185\u0003\u0002\u0002\u0002\u0186\u0187",
    "\u0003\u0002\u0002\u0002\u0187G\u0003\u0002\u0002\u0002\u0188\u018c",
    "\u0005\u0004\u0003\u0002\u0189\u018c\u0005\u00a0Q\u0002\u018a\u018c",
    "\u0005l7\u0002\u018b\u0188\u0003\u0002\u0002\u0002\u018b\u0189\u0003",
    "\u0002\u0002\u0002\u018b\u018a\u0003\u0002\u0002\u0002\u018cI\u0003",
    "\u0002\u0002\u0002\u018d\u018f\u0005L\'\u0002\u018e\u018d\u0003\u0002",
    "\u0002\u0002\u018f\u0192\u0003\u0002\u0002\u0002\u0190\u018e\u0003\u0002",
    "\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191\u0193\u0003\u0002",
    "\u0002\u0002\u0192\u0190\u0003\u0002\u0002\u0002\u0193\u0194\u0005N",
    "(\u0002\u0194\u0195\u0005`1\u0002\u0195K\u0003\u0002\u0002\u0002\u0196",
    "\u0197\t\b\u0002\u0002\u0197M\u0003\u0002\u0002\u0002\u0198\u0199\u0005",
    "P)\u0002\u0199\u019b\u0005R*\u0002\u019a\u019c\u0005Z.\u0002\u019b\u019a",
    "\u0003\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u01a4",
    "\u0003\u0002\u0002\u0002\u019d\u019e\u0005.\u0018\u0002\u019e\u019f",
    "\u0005P)\u0002\u019f\u01a1\u0005R*\u0002\u01a0\u01a2\u0005Z.\u0002\u01a1",
    "\u01a0\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002\u0002\u0002\u01a2",
    "\u01a4\u0003\u0002\u0002\u0002\u01a3\u0198\u0003\u0002\u0002\u0002\u01a3",
    "\u019d\u0003\u0002\u0002\u0002\u01a4O\u0003\u0002\u0002\u0002\u01a5",
    "\u01aa\u0005\u0006\u0004\u0002\u01a6\u01aa\u0005\n\u0006\u0002\u01a7",
    "\u01aa\u00077\u0002\u0002\u01a8\u01aa\u00074\u0002\u0002\u01a9\u01a5",
    "\u0003\u0002\u0002\u0002\u01a9\u01a6\u0003\u0002\u0002\u0002\u01a9\u01a7",
    "\u0003\u0002\u0002\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002\u01aaQ",
    "\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007=\u0002\u0002\u01ac\u01ae",
    "\u0007C\u0002\u0002\u01ad\u01af\u0005T+\u0002\u01ae\u01ad\u0003\u0002",
    "\u0002\u0002\u01ae\u01af\u0003\u0002\u0002\u0002\u01af\u01b0\u0003\u0002",
    "\u0002\u0002\u01b0\u01b2\u0007D\u0002\u0002\u01b1\u01b3\u0005\u0010",
    "\t\u0002\u01b2\u01b1\u0003\u0002\u0002\u0002\u01b2\u01b3\u0003\u0002",
    "\u0002\u0002\u01b3S\u0003\u0002\u0002\u0002\u01b4\u01b9\u0005V,\u0002",
    "\u01b5\u01b6\u0007B\u0002\u0002\u01b6\u01b8\u0005V,\u0002\u01b7\u01b5",
    "\u0003\u0002\u0002\u0002\u01b8\u01bb\u0003\u0002\u0002\u0002\u01b9\u01b7",
    "\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002\u0002\u0002\u01baU",
    "\u0003\u0002\u0002\u0002\u01bb\u01b9\u0003\u0002\u0002\u0002\u01bc\u01be",
    "\u0005X-\u0002\u01bd\u01bc\u0003\u0002\u0002\u0002\u01be\u01c1\u0003",
    "\u0002\u0002\u0002\u01bf\u01bd\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003",
    "\u0002\u0002\u0002\u01c0\u01c4\u0003\u0002\u0002\u0002\u01c1\u01bf\u0003",
    "\u0002\u0002\u0002\u01c2\u01c5\u0005\u0006\u0004\u0002\u01c3\u01c5\u0005",
    "\b\u0005\u0002\u01c4\u01c2\u0003\u0002\u0002\u0002\u01c4\u01c3\u0003",
    "\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002\u01c6\u01c7\u0005",
    "F$\u0002\u01c7W\u0003\u0002\u0002\u0002\u01c8\u01c9\u0007\u0014\u0002",
    "\u0002\u01c9Y\u0003\u0002\u0002\u0002\u01ca\u01cb\u00070\u0002\u0002",
    "\u01cb\u01cc\u0005\\/\u0002\u01cc[\u0003\u0002\u0002\u0002\u01cd\u01d2",
    "\u0005^0\u0002\u01ce\u01cf\u0007B\u0002\u0002\u01cf\u01d1\u0005^0\u0002",
    "\u01d0\u01ce\u0003\u0002\u0002\u0002\u01d1\u01d4\u0003\u0002\u0002\u0002",
    "\u01d2\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002",
    "\u01d3]\u0003\u0002\u0002\u0002\u01d4\u01d2\u0003\u0002\u0002\u0002",
    "\u01d5\u01d8\u0005\n\u0006\u0002\u01d6\u01d8\u0005\f\u0007\u0002\u01d7",
    "\u01d5\u0003\u0002\u0002\u0002\u01d7\u01d6\u0003\u0002\u0002\u0002\u01d8",
    "_\u0003\u0002\u0002\u0002\u01d9\u01dc\u0005p9\u0002\u01da\u01dc\u0007",
    "J\u0002\u0002\u01db\u01d9\u0003\u0002\u0002\u0002\u01db\u01da\u0003",
    "\u0002\u0002\u0002\u01dca\u0003\u0002\u0002\u0002\u01dd\u01df\u0005",
    "d3\u0002\u01de\u01dd\u0003\u0002\u0002\u0002\u01df\u01e2\u0003\u0002",
    "\u0002\u0002\u01e0\u01de\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003\u0002",
    "\u0002\u0002\u01e1\u01e3\u0003\u0002\u0002\u0002\u01e2\u01e0\u0003\u0002",
    "\u0002\u0002\u01e3\u01e5\u0005f4\u0002\u01e4\u01e6\u0005Z.\u0002\u01e5",
    "\u01e4\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002\u0002\u01e6",
    "\u01e7\u0003\u0002\u0002\u0002\u01e7\u01e8\u0005h5\u0002\u01e8c\u0003",
    "\u0002\u0002\u0002\u01e9\u01ea\t\t\u0002\u0002\u01eae\u0003\u0002\u0002",
    "\u0002\u01eb\u01ed\u0005.\u0018\u0002\u01ec\u01eb\u0003\u0002\u0002",
    "\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003\u0002\u0002",
    "\u0002\u01ee\u01ef\u0007<\u0002\u0002\u01ef\u01f1\u0007C\u0002\u0002",
    "\u01f0\u01f2\u0005T+\u0002\u01f1\u01f0\u0003\u0002\u0002\u0002\u01f1",
    "\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3",
    "\u01f4\u0007D\u0002\u0002\u01f4g\u0003\u0002\u0002\u0002\u01f5\u01f7",
    "\u0007E\u0002\u0002\u01f6\u01f8\u0005j6\u0002\u01f7\u01f6\u0003\u0002",
    "\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002\u0002\u01f8\u01fc\u0003\u0002",
    "\u0002\u0002\u01f9\u01fb\u0005t;\u0002\u01fa\u01f9\u0003\u0002\u0002",
    "\u0002\u01fb\u01fe\u0003\u0002\u0002\u0002\u01fc\u01fa\u0003\u0002\u0002",
    "\u0002\u01fc\u01fd\u0003\u0002\u0002\u0002\u01fd\u01ff\u0003\u0002\u0002",
    "\u0002\u01fe\u01fc\u0003\u0002\u0002\u0002\u01ff\u0200\u0007F\u0002",
    "\u0002\u0200i\u0003\u0002\u0002\u0002\u0201\u0203\u0005\u0016\f\u0002",
    "\u0202\u0201\u0003\u0002\u0002\u0002\u0202\u0203\u0003\u0002\u0002\u0002",
    "\u0203\u0204\u0003\u0002\u0002\u0002\u0204\u0205\t\n\u0002\u0002\u0205",
    "\u0207\u0007C\u0002\u0002\u0206\u0208\u0005\"\u0012\u0002\u0207\u0206",
    "\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u0209",
    "\u0003\u0002\u0002\u0002\u0209\u020a\u0007D\u0002\u0002\u020a\u020b",
    "\u0007J\u0002\u0002\u020bk\u0003\u0002\u0002\u0002\u020c\u0211\u0007",
    "E\u0002\u0002\u020d\u020f\u0005n8\u0002\u020e\u0210\u0007B\u0002\u0002",
    "\u020f\u020e\u0003\u0002\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002",
    "\u0210\u0212\u0003\u0002\u0002\u0002\u0211\u020d\u0003\u0002\u0002\u0002",
    "\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002",
    "\u0213\u0214\u0007F\u0002\u0002\u0214m\u0003\u0002\u0002\u0002\u0215",
    "\u021a\u0005H%\u0002\u0216\u0217\u0007B\u0002\u0002\u0217\u0219\u0005",
    "H%\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0219\u021c\u0003\u0002",
    "\u0002\u0002\u021a\u0218\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002",
    "\u0002\u0002\u021bo\u0003\u0002\u0002\u0002\u021c\u021a\u0003\u0002",
    "\u0002\u0002\u021d\u0221\u0007E\u0002\u0002\u021e\u0220\u0005t;\u0002",
    "\u021f\u021e\u0003\u0002\u0002\u0002\u0220\u0223\u0003\u0002\u0002\u0002",
    "\u0221\u021f\u0003\u0002\u0002\u0002\u0221\u0222\u0003\u0002\u0002\u0002",
    "\u0222\u0224\u0003\u0002\u0002\u0002\u0223\u0221\u0003\u0002\u0002\u0002",
    "\u0224\u0225\u0007F\u0002\u0002\u0225q\u0003\u0002\u0002\u0002\u0226",
    "\u0228\u0005X-\u0002\u0227\u0226\u0003\u0002\u0002\u0002\u0228\u022b",
    "\u0003\u0002\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u0229\u022a",
    "\u0003\u0002\u0002\u0002\u022a\u022e\u0003\u0002\u0002\u0002\u022b\u0229",
    "\u0003\u0002\u0002\u0002\u022c\u022f\u0005\u0006\u0004\u0002\u022d\u022f",
    "\u0005\b\u0005\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022e\u022d",
    "\u0003\u0002\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230\u0231",
    "\u0005B\"\u0002\u0231\u0232\u0007J\u0002\u0002\u0232s\u0003\u0002\u0002",
    "\u0002\u0233\u023a\u0005v<\u0002\u0234\u023a\u0005|?\u0002\u0235\u023a",
    "\u0005~@\u0002\u0236\u023a\u0005\u0080A\u0002\u0237\u023a\u0005r:\u0002",
    "\u0238\u023a\u0005\u008aF\u0002\u0239\u0233\u0003\u0002\u0002\u0002",
    "\u0239\u0234\u0003\u0002\u0002\u0002\u0239\u0235\u0003\u0002\u0002\u0002",
    "\u0239\u0236\u0003\u0002\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002",
    "\u0239\u0238\u0003\u0002\u0002\u0002\u023au\u0003\u0002\u0002\u0002",
    "\u023b\u0240\u0005x=\u0002\u023c\u0240\u0005\u0082B\u0002\u023d\u0240",
    "\u0005\u0084C\u0002\u023e\u0240\u0005\u0086D\u0002\u023f\u023b\u0003",
    "\u0002\u0002\u0002\u023f\u023c\u0003\u0002\u0002\u0002\u023f\u023d\u0003",
    "\u0002\u0002\u0002\u023f\u023e\u0003\u0002\u0002\u0002\u0240w\u0003",
    "\u0002\u0002\u0002\u0241\u0242\u0005z>\u0002\u0242\u0243\u0007J\u0002",
    "\u0002\u0243y\u0003\u0002\u0002\u0002\u0244\u0248\u0005\u008aF\u0002",
    "\u0245\u0248\u0005\u009eP\u0002\u0246\u0248\u0005\u00a0Q\u0002\u0247",
    "\u0244\u0003\u0002\u0002\u0002\u0247\u0245\u0003\u0002\u0002\u0002\u0247",
    "\u0246\u0003\u0002\u0002\u0002\u0248{\u0003\u0002\u0002\u0002\u0249",
    "\u024a\u0007\u0018\u0002\u0002\u024a\u024b\u0007C\u0002\u0002\u024b",
    "\u024c\u0005\u0088E\u0002\u024c\u0257\u0007D\u0002\u0002\u024d\u0250",
    "\u0005p9\u0002\u024e\u024f\u0007\u0011\u0002\u0002\u024f\u0251\u0005",
    "p9\u0002\u0250\u024e\u0003\u0002\u0002\u0002\u0250\u0251\u0003\u0002",
    "\u0002\u0002\u0251\u0258\u0003\u0002\u0002\u0002\u0252\u0255\u0005t",
    ";\u0002\u0253\u0254\u0007\u0011\u0002\u0002\u0254\u0256\u0005t;\u0002",
    "\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0256\u0003\u0002\u0002\u0002",
    "\u0256\u0258\u0003\u0002\u0002\u0002\u0257\u024d\u0003\u0002\u0002\u0002",
    "\u0257\u0252\u0003\u0002\u0002\u0002\u0258}\u0003\u0002\u0002\u0002",
    "\u0259\u025a\u00076\u0002\u0002\u025a\u025b\u0007C\u0002\u0002\u025b",
    "\u025c\u0005\u0088E\u0002\u025c\u0260\u0007D\u0002\u0002\u025d\u0261",
    "\u0005p9\u0002\u025e\u0261\u0005t;\u0002\u025f\u0261\u0007J\u0002\u0002",
    "\u0260\u025d\u0003\u0002\u0002\u0002\u0260\u025e\u0003\u0002\u0002\u0002",
    "\u0260\u025f\u0003\u0002\u0002\u0002\u0261\u007f\u0003\u0002\u0002\u0002",
    "\u0262\u0263\u0007\u0017\u0002\u0002\u0263\u0266\u0007C\u0002\u0002",
    "\u0264\u0267\u0005r:\u0002\u0265\u0267\u0007J\u0002\u0002\u0266\u0264",
    "\u0003\u0002\u0002\u0002\u0266\u0265\u0003\u0002\u0002\u0002\u0267\u0269",
    "\u0003\u0002\u0002\u0002\u0268\u026a\u0005\u0088E\u0002\u0269\u0268",
    "\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u026b",
    "\u0003\u0002\u0002\u0002\u026b\u026d\u0007J\u0002\u0002\u026c\u026e",
    "\u0005\u009cO\u0002\u026d\u026c\u0003\u0002\u0002\u0002\u026d\u026e",
    "\u0003\u0002\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0270",
    "\u0007D\u0002\u0002\u0270\u0271\u0005p9\u0002\u0271\u0081\u0003\u0002",
    "\u0002\u0002\u0272\u0273\u0007\u0006\u0002\u0002\u0273\u0274\u0007J",
    "\u0002\u0002\u0274\u0083\u0003\u0002\u0002\u0002\u0275\u0276\u0007\r",
    "\u0002\u0002\u0276\u0277\u0007J\u0002\u0002\u0277\u0085\u0003\u0002",
    "\u0002\u0002\u0278\u027a\u0007(\u0002\u0002\u0279\u027b\u0005\u0088",
    "E\u0002\u027a\u0279\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002",
    "\u0002\u0002\u027b\u027c\u0003\u0002\u0002\u0002\u027c\u027d\u0007J",
    "\u0002\u0002\u027d\u0087\u0003\u0002\u0002\u0002\u027e\u0282\u0005\u0004",
    "\u0003\u0002\u027f\u0282\u0005\u008eH\u0002\u0280\u0282\u0005\u00a0",
    "Q\u0002\u0281\u027e\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002",
    "\u0002\u0002\u0281\u0280\u0003\u0002\u0002\u0002\u0282\u0089\u0003\u0002",
    "\u0002\u0002\u0283\u0287\u00077\u0002\u0002\u0284\u0287\u0005\u0006",
    "\u0004\u0002\u0285\u0287\u0005\b\u0005\u0002\u0286\u0283\u0003\u0002",
    "\u0002\u0002\u0286\u0284\u0003\u0002\u0002\u0002\u0286\u0285\u0003\u0002",
    "\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002",
    "\u0002\u0002\u0288\u0289\u0007=\u0002\u0002\u0289\u028a\u0005\u008c",
    "G\u0002\u028a\u028b\u0005\u0088E\u0002\u028b\u028e\u0003\u0002\u0002",
    "\u0002\u028c\u028e\u0005\u009cO\u0002\u028d\u0286\u0003\u0002\u0002",
    "\u0002\u028d\u028c\u0003\u0002\u0002\u0002\u028e\u008b\u0003\u0002\u0002",
    "\u0002\u028f\u029b\u0007K\u0002\u0002\u0290\u0291\u0007P\u0002\u0002",
    "\u0291\u029b\u0007K\u0002\u0002\u0292\u0293\u0007O\u0002\u0002\u0293",
    "\u029b\u0007K\u0002\u0002\u0294\u0295\u0007Q\u0002\u0002\u0295\u029b",
    "\u0007K\u0002\u0002\u0296\u0297\u0007M\u0002\u0002\u0297\u029b\u0007",
    "K\u0002\u0002\u0298\u0299\u0007N\u0002\u0002\u0299\u029b\u0007K\u0002",
    "\u0002\u029a\u028f\u0003\u0002\u0002\u0002\u029a\u0290\u0003\u0002\u0002",
    "\u0002\u029a\u0292\u0003\u0002\u0002\u0002\u029a\u0294\u0003\u0002\u0002",
    "\u0002\u029a\u0296\u0003\u0002\u0002\u0002\u029a\u0298\u0003\u0002\u0002",
    "\u0002\u029b\u008d\u0003\u0002\u0002\u0002\u029c\u029d\bH\u0001\u0002",
    "\u029d\u029e\u0005\u0090I\u0002\u029e\u02a7\u0003\u0002\u0002\u0002",
    "\u029f\u02a0\f\u0003\u0002\u0002\u02a0\u02a1\u0007_\u0002\u0002\u02a1",
    "\u02a2\u0005\u0088E\u0002\u02a2\u02a3\u0007B\u0002\u0002\u02a3\u02a4",
    "\u0005\u0090I\u0002\u02a4\u02a6\u0003\u0002\u0002\u0002\u02a5\u029f",
    "\u0003\u0002\u0002\u0002\u02a6\u02a9\u0003\u0002\u0002\u0002\u02a7\u02a5",
    "\u0003\u0002\u0002\u0002\u02a7\u02a8\u0003\u0002\u0002\u0002\u02a8\u008f",
    "\u0003\u0002\u0002\u0002\u02a9\u02a7\u0003\u0002\u0002\u0002\u02aa\u02ab",
    "\bI\u0001\u0002\u02ab\u02ac\u0005\u0092J\u0002\u02ac\u02b2\u0003\u0002",
    "\u0002\u0002\u02ad\u02ae\f\u0003\u0002\u0002\u02ae\u02af\u0007V\u0002",
    "\u0002\u02af\u02b1\u0005\u0092J\u0002\u02b0\u02ad\u0003\u0002\u0002",
    "\u0002\u02b1\u02b4\u0003\u0002\u0002\u0002\u02b2\u02b0\u0003\u0002\u0002",
    "\u0002\u02b2\u02b3\u0003\u0002\u0002\u0002\u02b3\u0091\u0003\u0002\u0002",
    "\u0002\u02b4\u02b2\u0003\u0002\u0002\u0002\u02b5\u02b6\bJ\u0001\u0002",
    "\u02b6\u02b7\u0005\u0094K\u0002\u02b7\u02bd\u0003\u0002\u0002\u0002",
    "\u02b8\u02b9\f\u0003\u0002\u0002\u02b9\u02ba\u0007W\u0002\u0002\u02ba",
    "\u02bc\u0005\u0094K\u0002\u02bb\u02b8\u0003\u0002\u0002\u0002\u02bc",
    "\u02bf\u0003\u0002\u0002\u0002\u02bd\u02bb\u0003\u0002\u0002\u0002\u02bd",
    "\u02be\u0003\u0002\u0002\u0002\u02be\u0093\u0003\u0002\u0002\u0002\u02bf",
    "\u02bd\u0003\u0002\u0002\u0002\u02c0\u02c1\bK\u0001\u0002\u02c1\u02c2",
    "\u0005\u0096L\u0002\u02c2\u02c8\u0003\u0002\u0002\u0002\u02c3\u02c4",
    "\f\u0003\u0002\u0002\u02c4\u02c5\t\u000b\u0002\u0002\u02c5\u02c7\u0005",
    "\u0096L\u0002\u02c6\u02c3\u0003\u0002\u0002\u0002\u02c7\u02ca\u0003",
    "\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8\u02c9\u0003",
    "\u0002\u0002\u0002\u02c9\u0095\u0003\u0002\u0002\u0002\u02ca\u02c8\u0003",
    "\u0002\u0002\u0002\u02cb\u02cc\bL\u0001\u0002\u02cc\u02cd\u0005\u0098",
    "M\u0002\u02cd\u02d3\u0003\u0002\u0002\u0002\u02ce\u02cf\f\u0003\u0002",
    "\u0002\u02cf\u02d0\t\f\u0002\u0002\u02d0\u02d2\u0005\u0098M\u0002\u02d1",
    "\u02ce\u0003\u0002\u0002\u0002\u02d2\u02d5\u0003\u0002\u0002\u0002\u02d3",
    "\u02d1\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002\u0002\u0002\u02d4",
    "\u0097\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d6",
    "\u02d7\bM\u0001\u0002\u02d7\u02d8\u0005\u009aN\u0002\u02d8\u02de\u0003",
    "\u0002\u0002\u0002\u02d9\u02da\f\u0003\u0002\u0002\u02da\u02db\t\r\u0002",
    "\u0002\u02db\u02dd\u0005\u009aN\u0002\u02dc\u02d9\u0003\u0002\u0002",
    "\u0002\u02dd\u02e0\u0003\u0002\u0002\u0002\u02de\u02dc\u0003\u0002\u0002",
    "\u0002\u02de\u02df\u0003\u0002\u0002\u0002\u02df\u0099\u0003\u0002\u0002",
    "\u0002\u02e0\u02de\u0003\u0002\u0002\u0002\u02e1\u02e5\u0005\u009cO",
    "\u0002\u02e2\u02e3\t\u000e\u0002\u0002\u02e3\u02e5\u0005\u009aN\u0002",
    "\u02e4\u02e1\u0003\u0002\u0002\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002",
    "\u02e5\u009b\u0003\u0002\u0002\u0002\u02e6\u02f3\u0005\u0004\u0003\u0002",
    "\u02e7\u02e9\t\u000f\u0002\u0002\u02e8\u02e7\u0003\u0002\u0002\u0002",
    "\u02e8\u02e9\u0003\u0002\u0002\u0002\u02e9\u02ea\u0003\u0002\u0002\u0002",
    "\u02ea\u02ec\u0007=\u0002\u0002\u02eb\u02ed\t\u000f\u0002\u0002\u02ec",
    "\u02eb\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002\u02ed",
    "\u02f3\u0003\u0002\u0002\u0002\u02ee\u02ef\u0007C\u0002\u0002\u02ef",
    "\u02f0\u0005\u0088E\u0002\u02f0\u02f1\u0007D\u0002\u0002\u02f1\u02f3",
    "\u0003\u0002\u0002\u0002\u02f2\u02e6\u0003\u0002\u0002\u0002\u02f2\u02e8",
    "\u0003\u0002\u0002\u0002\u02f2\u02ee\u0003\u0002\u0002\u0002\u02f3\u009d",
    "\u0003\u0002\u0002\u0002\u02f4\u02f5\u0005$\u0013\u0002\u02f5\u02f7",
    "\u0007C\u0002\u0002\u02f6\u02f8\u0005\"\u0012\u0002\u02f7\u02f6\u0003",
    "\u0002\u0002\u0002\u02f7\u02f8\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003",
    "\u0002\u0002\u0002\u02f9\u02fa\u0007D\u0002\u0002\u02fa\u009f\u0003",
    "\u0002\u0002\u0002\u02fb\u02fd\u0007\"\u0002\u0002\u02fc\u02fe\u0005",
    "\u0016\f\u0002\u02fd\u02fc\u0003\u0002\u0002\u0002\u02fd\u02fe\u0003",
    "\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff\u0301\u0005",
    " \u0011\u0002\u0300\u0302\u00050\u0019\u0002\u0301\u0300\u0003\u0002",
    "\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302\u0303\u0003\u0002",
    "\u0002\u0002\u0303\u0305\u0007C\u0002\u0002\u0304\u0306\u0005\"\u0012",
    "\u0002\u0305\u0304\u0003\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002",
    "\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307\u0309\u0007D\u0002",
    "\u0002\u0308\u030a\u0005:\u001e\u0002\u0309\u0308\u0003\u0002\u0002",
    "\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u00a1\u0003\u0002\u0002",
    "\u0002]\u00a3\u00a8\u00b5\u00b9\u00be\u00c2\u00d0\u00d6\u00da\u00e0",
    "\u00e9\u00f0\u00f5\u00f9\u00ff\u0109\u0111\u011c\u0121\u0128\u012e\u0131",
    "\u0134\u0141\u0148\u0156\u015d\u0166\u016b\u0170\u017c\u0182\u0186\u018b",
    "\u0190\u019b\u01a1\u01a3\u01a9\u01ae\u01b2\u01b9\u01bf\u01c4\u01d2\u01d7",
    "\u01db\u01e0\u01e5\u01ec\u01f1\u01f7\u01fc\u0202\u0207\u020f\u0211\u021a",
    "\u0221\u0229\u022e\u0239\u023f\u0247\u0250\u0255\u0257\u0260\u0266\u0269",
    "\u026d\u027a\u0281\u0286\u028d\u029a\u02a7\u02b2\u02bd\u02c8\u02d3\u02de",
    "\u02e4\u02e8\u02ec\u02f2\u02f7\u02fd\u0301\u0305\u0309"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'abstract'", "'assert'", "'boolean'", "'break'", 
                     "'byte'", "'case'", "'catch'", "'char'", "'class'", 
                     "'const'", "'continue'", "'default'", "'do'", "'double'", 
                     "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
                     "'float'", "'for'", "'if'", "'goto'", "'implements'", 
                     "'import'", "'instanceof'", "'int'", "'interface'", 
                     "'long'", "'module'", "'native'", "'new'", "'null'", 
                     "'package'", "'private'", "'protected'", "'public'", 
                     "'return'", "'short'", "'static'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'to'", "'transient'", "'try'", "'void'", "'volatile'", 
                     "'while'", null, null, null, null, null, null, null, 
                     null, "'''", "'\"'", "'.'", "','", "'('", "')'", "'{'", 
                     "'}'", "'['", "']'", "':'", "';'", "'='", "'->'", "'+'", 
                     "'-'", "'/'", "'*'", "'%'", "'++'", "'--'", "'&'", 
                     "'|'", null, null, "'<'", "'>'", null, null, null, 
                     null, "'!'", "'?'" ];

var symbolicNames = [ null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", 
                      "CASE", "CATCH", "CHAR", "CLASS", "CONST", "CONTINUE", 
                      "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", 
                      "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
                      "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", 
                      "LONG", "MODULE", "NATIVE", "NEW", "NULL", "PACKAGE", 
                      "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", 
                      "STATIC", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TO", "TRANSIENT", "TRY", "VOID", 
                      "VOLATILE", "WHILE", "TYPE", "INTEGER_VALUE", "DOUBLE_VALUE", 
                      "BOOLEAN_VALUE", "STRING_VALUE", "CLASS_IDENTIFIER", 
                      "IDENTIFIER", "WS", "QUOT", "QUOT_TWO", "DOT", "COMMA", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LSQUARE", 
                      "RSQUARE", "COLON", "SEMICOLON", "ASSIGN", "ARROW", 
                      "PLUS", "MINUS", "DIV", "MUL", "MOD", "INC", "DEC", 
                      "BITAND", "BITOR", "OR", "AND", "LT", "GT", "LE", 
                      "GE", "EQ", "NOT_EQ", "NOT", "Q_MARK" ];

var ruleNames =  [ "compilationUnit", "primitive", "primitiveType", "referenceType", 
                   "classType", "variableType", "arrayType", "brackets_square", 
                   "typeParameter", "typeBound", "argumentsType", "typeArgumentList", 
                   "typeArgument", "wildcard", "wildcardBounds", "string_dot_splitted", 
                   "argumentList", "methodName", "packageDeclaration", "importDeclaration", 
                   "classDeclaration", "classModifier", "typeParameters", 
                   "typeArgumentsOrEmpty", "typeParameterList", "superclass", 
                   "superinterfaces", "classTypeList", "classBody", "classMemberDeclaration", 
                   "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "methodDeclaration", "methodModifier", "methodHeader", 
                   "result", "methodDeclarator", "formalParameterList", 
                   "formalParameter", "variableModifier", "throws_", "exceptionTypeList", 
                   "exceptionType", "methodBody", "constructorDeclaration", 
                   "constructorModifier", "constructorDeclarator", "constructorBody", 
                   "explicitConstructorInvocation", "arrayInitializer", 
                   "variableInitializerList", "block", "localVariableDeclaration", 
                   "statement", "statementWithoutTrailingSubstatement", 
                   "expressionStatement", "statementExpression", "ifStatement", 
                   "whileStatement", "forStatement", "breakStatement", "continueStatement", 
                   "returnStatement", "expression", "assignment", "assignmentOperator", 
                   "conditionalExpression", "conditionalOrExpression", "conditionalAndExpression", 
                   "relationalExpression", "additiveExpression", "multiplicativeExpression", 
                   "unaryExpression", "incOrDecExpression", "methodInvocation", 
                   "classInstanceCreationExpression" ];

function GrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

GrammarParser.prototype = Object.create(antlr4.Parser.prototype);
GrammarParser.prototype.constructor = GrammarParser;

Object.defineProperty(GrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

GrammarParser.EOF = antlr4.Token.EOF;
GrammarParser.ABSTRACT = 1;
GrammarParser.ASSERT = 2;
GrammarParser.BOOLEAN = 3;
GrammarParser.BREAK = 4;
GrammarParser.BYTE = 5;
GrammarParser.CASE = 6;
GrammarParser.CATCH = 7;
GrammarParser.CHAR = 8;
GrammarParser.CLASS = 9;
GrammarParser.CONST = 10;
GrammarParser.CONTINUE = 11;
GrammarParser.DEFAULT = 12;
GrammarParser.DO = 13;
GrammarParser.DOUBLE = 14;
GrammarParser.ELSE = 15;
GrammarParser.ENUM = 16;
GrammarParser.EXTENDS = 17;
GrammarParser.FINAL = 18;
GrammarParser.FINALLY = 19;
GrammarParser.FLOAT = 20;
GrammarParser.FOR = 21;
GrammarParser.IF = 22;
GrammarParser.GOTO = 23;
GrammarParser.IMPLEMENTS = 24;
GrammarParser.IMPORT = 25;
GrammarParser.INSTANCEOF = 26;
GrammarParser.INT = 27;
GrammarParser.INTERFACE = 28;
GrammarParser.LONG = 29;
GrammarParser.MODULE = 30;
GrammarParser.NATIVE = 31;
GrammarParser.NEW = 32;
GrammarParser.NULL = 33;
GrammarParser.PACKAGE = 34;
GrammarParser.PRIVATE = 35;
GrammarParser.PROTECTED = 36;
GrammarParser.PUBLIC = 37;
GrammarParser.RETURN = 38;
GrammarParser.SHORT = 39;
GrammarParser.STATIC = 40;
GrammarParser.SUPER = 41;
GrammarParser.SWITCH = 42;
GrammarParser.SYNCHRONIZED = 43;
GrammarParser.THIS = 44;
GrammarParser.THROW = 45;
GrammarParser.THROWS = 46;
GrammarParser.TO = 47;
GrammarParser.TRANSIENT = 48;
GrammarParser.TRY = 49;
GrammarParser.VOID = 50;
GrammarParser.VOLATILE = 51;
GrammarParser.WHILE = 52;
GrammarParser.TYPE = 53;
GrammarParser.INTEGER_VALUE = 54;
GrammarParser.DOUBLE_VALUE = 55;
GrammarParser.BOOLEAN_VALUE = 56;
GrammarParser.STRING_VALUE = 57;
GrammarParser.CLASS_IDENTIFIER = 58;
GrammarParser.IDENTIFIER = 59;
GrammarParser.WS = 60;
GrammarParser.QUOT = 61;
GrammarParser.QUOT_TWO = 62;
GrammarParser.DOT = 63;
GrammarParser.COMMA = 64;
GrammarParser.LPAREN = 65;
GrammarParser.RPAREN = 66;
GrammarParser.LBRACE = 67;
GrammarParser.RBRACE = 68;
GrammarParser.LSQUARE = 69;
GrammarParser.RSQUARE = 70;
GrammarParser.COLON = 71;
GrammarParser.SEMICOLON = 72;
GrammarParser.ASSIGN = 73;
GrammarParser.ARROW = 74;
GrammarParser.PLUS = 75;
GrammarParser.MINUS = 76;
GrammarParser.DIV = 77;
GrammarParser.MUL = 78;
GrammarParser.MOD = 79;
GrammarParser.INC = 80;
GrammarParser.DEC = 81;
GrammarParser.BITAND = 82;
GrammarParser.BITOR = 83;
GrammarParser.OR = 84;
GrammarParser.AND = 85;
GrammarParser.LT = 86;
GrammarParser.GT = 87;
GrammarParser.LE = 88;
GrammarParser.GE = 89;
GrammarParser.EQ = 90;
GrammarParser.NOT_EQ = 91;
GrammarParser.NOT = 92;
GrammarParser.Q_MARK = 93;

GrammarParser.RULE_compilationUnit = 0;
GrammarParser.RULE_primitive = 1;
GrammarParser.RULE_primitiveType = 2;
GrammarParser.RULE_referenceType = 3;
GrammarParser.RULE_classType = 4;
GrammarParser.RULE_variableType = 5;
GrammarParser.RULE_arrayType = 6;
GrammarParser.RULE_brackets_square = 7;
GrammarParser.RULE_typeParameter = 8;
GrammarParser.RULE_typeBound = 9;
GrammarParser.RULE_argumentsType = 10;
GrammarParser.RULE_typeArgumentList = 11;
GrammarParser.RULE_typeArgument = 12;
GrammarParser.RULE_wildcard = 13;
GrammarParser.RULE_wildcardBounds = 14;
GrammarParser.RULE_string_dot_splitted = 15;
GrammarParser.RULE_argumentList = 16;
GrammarParser.RULE_methodName = 17;
GrammarParser.RULE_packageDeclaration = 18;
GrammarParser.RULE_importDeclaration = 19;
GrammarParser.RULE_classDeclaration = 20;
GrammarParser.RULE_classModifier = 21;
GrammarParser.RULE_typeParameters = 22;
GrammarParser.RULE_typeArgumentsOrEmpty = 23;
GrammarParser.RULE_typeParameterList = 24;
GrammarParser.RULE_superclass = 25;
GrammarParser.RULE_superinterfaces = 26;
GrammarParser.RULE_classTypeList = 27;
GrammarParser.RULE_classBody = 28;
GrammarParser.RULE_classMemberDeclaration = 29;
GrammarParser.RULE_fieldDeclaration = 30;
GrammarParser.RULE_fieldModifier = 31;
GrammarParser.RULE_variableDeclaratorList = 32;
GrammarParser.RULE_variableDeclarator = 33;
GrammarParser.RULE_variableDeclaratorId = 34;
GrammarParser.RULE_variableInitializer = 35;
GrammarParser.RULE_methodDeclaration = 36;
GrammarParser.RULE_methodModifier = 37;
GrammarParser.RULE_methodHeader = 38;
GrammarParser.RULE_result = 39;
GrammarParser.RULE_methodDeclarator = 40;
GrammarParser.RULE_formalParameterList = 41;
GrammarParser.RULE_formalParameter = 42;
GrammarParser.RULE_variableModifier = 43;
GrammarParser.RULE_throws_ = 44;
GrammarParser.RULE_exceptionTypeList = 45;
GrammarParser.RULE_exceptionType = 46;
GrammarParser.RULE_methodBody = 47;
GrammarParser.RULE_constructorDeclaration = 48;
GrammarParser.RULE_constructorModifier = 49;
GrammarParser.RULE_constructorDeclarator = 50;
GrammarParser.RULE_constructorBody = 51;
GrammarParser.RULE_explicitConstructorInvocation = 52;
GrammarParser.RULE_arrayInitializer = 53;
GrammarParser.RULE_variableInitializerList = 54;
GrammarParser.RULE_block = 55;
GrammarParser.RULE_localVariableDeclaration = 56;
GrammarParser.RULE_statement = 57;
GrammarParser.RULE_statementWithoutTrailingSubstatement = 58;
GrammarParser.RULE_expressionStatement = 59;
GrammarParser.RULE_statementExpression = 60;
GrammarParser.RULE_ifStatement = 61;
GrammarParser.RULE_whileStatement = 62;
GrammarParser.RULE_forStatement = 63;
GrammarParser.RULE_breakStatement = 64;
GrammarParser.RULE_continueStatement = 65;
GrammarParser.RULE_returnStatement = 66;
GrammarParser.RULE_expression = 67;
GrammarParser.RULE_assignment = 68;
GrammarParser.RULE_assignmentOperator = 69;
GrammarParser.RULE_conditionalExpression = 70;
GrammarParser.RULE_conditionalOrExpression = 71;
GrammarParser.RULE_conditionalAndExpression = 72;
GrammarParser.RULE_relationalExpression = 73;
GrammarParser.RULE_additiveExpression = 74;
GrammarParser.RULE_multiplicativeExpression = 75;
GrammarParser.RULE_unaryExpression = 76;
GrammarParser.RULE_incOrDecExpression = 77;
GrammarParser.RULE_methodInvocation = 78;
GrammarParser.RULE_classInstanceCreationExpression = 79;


function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(GrammarParser.EOF, 0);
};

CompilationUnitContext.prototype.packageDeclaration = function() {
    return this.getTypedRuleContext(PackageDeclarationContext,0);
};

CompilationUnitContext.prototype.importDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
        return this.getTypedRuleContext(ImportDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitCompilationUnit(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.CompilationUnitContext = CompilationUnitContext;

GrammarParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, GrammarParser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.PACKAGE) {
            this.state = 160;
            this.packageDeclaration();
        }

        this.state = 166;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.IMPORT) {
            this.state = 163;
            this.importDeclaration();
            this.state = 168;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 169;
        this.classDeclaration();
        this.state = 170;
        this.match(GrammarParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimitiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_primitive;
    return this;
}

PrimitiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveContext.prototype.constructor = PrimitiveContext;

PrimitiveContext.prototype.INTEGER_VALUE = function() {
    return this.getToken(GrammarParser.INTEGER_VALUE, 0);
};

PrimitiveContext.prototype.DOUBLE_VALUE = function() {
    return this.getToken(GrammarParser.DOUBLE_VALUE, 0);
};

PrimitiveContext.prototype.BOOLEAN_VALUE = function() {
    return this.getToken(GrammarParser.BOOLEAN_VALUE, 0);
};

PrimitiveContext.prototype.STRING_VALUE = function() {
    return this.getToken(GrammarParser.STRING_VALUE, 0);
};

PrimitiveContext.prototype.NULL = function() {
    return this.getToken(GrammarParser.NULL, 0);
};

PrimitiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPrimitive(this);
	}
};

PrimitiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPrimitive(this);
	}
};

PrimitiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitPrimitive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PrimitiveContext = PrimitiveContext;

GrammarParser.prototype.primitive = function() {

    var localctx = new PrimitiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, GrammarParser.RULE_primitive);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 172;
        _la = this._input.LA(1);
        if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (GrammarParser.NULL - 33)) | (1 << (GrammarParser.INTEGER_VALUE - 33)) | (1 << (GrammarParser.DOUBLE_VALUE - 33)) | (1 << (GrammarParser.BOOLEAN_VALUE - 33)) | (1 << (GrammarParser.STRING_VALUE - 33)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimitiveTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_primitiveType;
    return this;
}

PrimitiveTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveTypeContext.prototype.constructor = PrimitiveTypeContext;

PrimitiveTypeContext.prototype.BYTE = function() {
    return this.getToken(GrammarParser.BYTE, 0);
};

PrimitiveTypeContext.prototype.SHORT = function() {
    return this.getToken(GrammarParser.SHORT, 0);
};

PrimitiveTypeContext.prototype.INT = function() {
    return this.getToken(GrammarParser.INT, 0);
};

PrimitiveTypeContext.prototype.LONG = function() {
    return this.getToken(GrammarParser.LONG, 0);
};

PrimitiveTypeContext.prototype.CHAR = function() {
    return this.getToken(GrammarParser.CHAR, 0);
};

PrimitiveTypeContext.prototype.FLOAT = function() {
    return this.getToken(GrammarParser.FLOAT, 0);
};

PrimitiveTypeContext.prototype.DOUBLE = function() {
    return this.getToken(GrammarParser.DOUBLE, 0);
};

PrimitiveTypeContext.prototype.BOOLEAN = function() {
    return this.getToken(GrammarParser.BOOLEAN, 0);
};

PrimitiveTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPrimitiveType(this);
	}
};

PrimitiveTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitPrimitiveType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PrimitiveTypeContext = PrimitiveTypeContext;

GrammarParser.prototype.primitiveType = function() {

    var localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, GrammarParser.RULE_primitiveType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 174;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG))) !== 0) || _la===GrammarParser.SHORT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReferenceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_referenceType;
    return this;
}

ReferenceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReferenceTypeContext.prototype.constructor = ReferenceTypeContext;

ReferenceTypeContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

ReferenceTypeContext.prototype.variableType = function() {
    return this.getTypedRuleContext(VariableTypeContext,0);
};

ReferenceTypeContext.prototype.arrayType = function() {
    return this.getTypedRuleContext(ArrayTypeContext,0);
};

ReferenceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterReferenceType(this);
	}
};

ReferenceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitReferenceType(this);
	}
};

ReferenceTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitReferenceType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ReferenceTypeContext = ReferenceTypeContext;

GrammarParser.prototype.referenceType = function() {

    var localctx = new ReferenceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, GrammarParser.RULE_referenceType);
    try {
        this.state = 179;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 176;
            this.classType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 177;
            this.variableType();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 178;
            this.arrayType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_classType;
    return this;
}

ClassTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTypeContext.prototype.constructor = ClassTypeContext;

ClassTypeContext.prototype.CLASS_IDENTIFIER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.CLASS_IDENTIFIER);
    } else {
        return this.getToken(GrammarParser.CLASS_IDENTIFIER, i);
    }
};


ClassTypeContext.prototype.argumentsType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentsTypeContext);
    } else {
        return this.getTypedRuleContext(ArgumentsTypeContext,i);
    }
};

ClassTypeContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.DOT);
    } else {
        return this.getToken(GrammarParser.DOT, i);
    }
};


ClassTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterClassType(this);
	}
};

ClassTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitClassType(this);
	}
};

ClassTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitClassType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ClassTypeContext = ClassTypeContext;

GrammarParser.prototype.classType = function() {

    var localctx = new ClassTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, GrammarParser.RULE_classType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 181;
        this.match(GrammarParser.CLASS_IDENTIFIER);
        this.state = 183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LT) {
            this.state = 182;
            this.argumentsType();
        }

        this.state = 192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.DOT) {
            this.state = 185;
            this.match(GrammarParser.DOT);
            this.state = 186;
            this.match(GrammarParser.CLASS_IDENTIFIER);
            this.state = 188;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.LT) {
                this.state = 187;
                this.argumentsType();
            }

            this.state = 194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableType;
    return this;
}

VariableTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableTypeContext.prototype.constructor = VariableTypeContext;

VariableTypeContext.prototype.TYPE = function() {
    return this.getToken(GrammarParser.TYPE, 0);
};

VariableTypeContext.prototype.CLASS_IDENTIFIER = function() {
    return this.getToken(GrammarParser.CLASS_IDENTIFIER, 0);
};

VariableTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableType(this);
	}
};

VariableTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableType(this);
	}
};

VariableTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableTypeContext = VariableTypeContext;

GrammarParser.prototype.variableType = function() {

    var localctx = new VariableTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, GrammarParser.RULE_variableType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 195;
        _la = this._input.LA(1);
        if(!(_la===GrammarParser.TYPE || _la===GrammarParser.CLASS_IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_arrayType;
    return this;
}

ArrayTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayTypeContext.prototype.constructor = ArrayTypeContext;

ArrayTypeContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

ArrayTypeContext.prototype.brackets_square = function() {
    return this.getTypedRuleContext(Brackets_squareContext,0);
};

ArrayTypeContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

ArrayTypeContext.prototype.variableType = function() {
    return this.getTypedRuleContext(VariableTypeContext,0);
};

ArrayTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterArrayType(this);
	}
};

ArrayTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitArrayType(this);
	}
};

ArrayTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitArrayType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ArrayTypeContext = ArrayTypeContext;

GrammarParser.prototype.arrayType = function() {

    var localctx = new ArrayTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, GrammarParser.RULE_arrayType);
    try {
        this.state = 206;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 197;
            this.primitiveType();
            this.state = 198;
            this.brackets_square();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 200;
            this.classType();
            this.state = 201;
            this.brackets_square();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 203;
            this.variableType();
            this.state = 204;
            this.brackets_square();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Brackets_squareContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_brackets_square;
    return this;
}

Brackets_squareContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Brackets_squareContext.prototype.constructor = Brackets_squareContext;

Brackets_squareContext.prototype.LSQUARE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.LSQUARE);
    } else {
        return this.getToken(GrammarParser.LSQUARE, i);
    }
};


Brackets_squareContext.prototype.RSQUARE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.RSQUARE);
    } else {
        return this.getToken(GrammarParser.RSQUARE, i);
    }
};


Brackets_squareContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterBrackets_square(this);
	}
};

Brackets_squareContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitBrackets_square(this);
	}
};

Brackets_squareContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitBrackets_square(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.Brackets_squareContext = Brackets_squareContext;

GrammarParser.prototype.brackets_square = function() {

    var localctx = new Brackets_squareContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, GrammarParser.RULE_brackets_square);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 210; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 208;
            this.match(GrammarParser.LSQUARE);
            this.state = 209;
            this.match(GrammarParser.RSQUARE);
            this.state = 212; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===GrammarParser.LSQUARE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

TypeParameterContext.prototype.typeBound = function() {
    return this.getTypedRuleContext(TypeBoundContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeParameter(this);
	}
};

TypeParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeParameterContext = TypeParameterContext;

GrammarParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, GrammarParser.RULE_typeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 214;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 216;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.EXTENDS) {
            this.state = 215;
            this.typeBound();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeBound;
    return this;
}

TypeBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeBoundContext.prototype.constructor = TypeBoundContext;

TypeBoundContext.prototype.EXTENDS = function() {
    return this.getToken(GrammarParser.EXTENDS, 0);
};

TypeBoundContext.prototype.variableType = function() {
    return this.getTypedRuleContext(VariableTypeContext,0);
};

TypeBoundContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

TypeBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeBound(this);
	}
};

TypeBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeBound(this);
	}
};

TypeBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeBoundContext = TypeBoundContext;

GrammarParser.prototype.typeBound = function() {

    var localctx = new TypeBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, GrammarParser.RULE_typeBound);
    try {
        this.state = 222;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 218;
            this.match(GrammarParser.EXTENDS);
            this.state = 219;
            this.variableType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 220;
            this.match(GrammarParser.EXTENDS);
            this.state = 221;
            this.classType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgumentsTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_argumentsType;
    return this;
}

ArgumentsTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsTypeContext.prototype.constructor = ArgumentsTypeContext;

ArgumentsTypeContext.prototype.LT = function() {
    return this.getToken(GrammarParser.LT, 0);
};

ArgumentsTypeContext.prototype.typeArgumentList = function() {
    return this.getTypedRuleContext(TypeArgumentListContext,0);
};

ArgumentsTypeContext.prototype.GT = function() {
    return this.getToken(GrammarParser.GT, 0);
};

ArgumentsTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterArgumentsType(this);
	}
};

ArgumentsTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitArgumentsType(this);
	}
};

ArgumentsTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitArgumentsType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ArgumentsTypeContext = ArgumentsTypeContext;

GrammarParser.prototype.argumentsType = function() {

    var localctx = new ArgumentsTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, GrammarParser.RULE_argumentsType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 224;
        this.match(GrammarParser.LT);
        this.state = 225;
        this.typeArgumentList();
        this.state = 226;
        this.match(GrammarParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeArgumentList;
    return this;
}

TypeArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentListContext.prototype.constructor = TypeArgumentListContext;

TypeArgumentListContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


TypeArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeArgumentList(this);
	}
};

TypeArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeArgumentList(this);
	}
};

TypeArgumentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeArgumentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeArgumentListContext = TypeArgumentListContext;

GrammarParser.prototype.typeArgumentList = function() {

    var localctx = new TypeArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, GrammarParser.RULE_typeArgumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 231;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (GrammarParser.SHORT - 39)) | (1 << (GrammarParser.TYPE - 39)) | (1 << (GrammarParser.CLASS_IDENTIFIER - 39)) | (1 << (GrammarParser.IDENTIFIER - 39)))) !== 0)) {
            this.state = 228;
            this.typeArgument();
            this.state = 233;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 234;
            this.match(GrammarParser.COMMA);
            this.state = 235;
            this.typeArgument();
            this.state = 240;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

TypeArgumentContext.prototype.wildcard = function() {
    return this.getTypedRuleContext(WildcardContext,0);
};

TypeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeArgument(this);
	}
};

TypeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeArgument(this);
	}
};

TypeArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeArgumentContext = TypeArgumentContext;

GrammarParser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, GrammarParser.RULE_typeArgument);
    try {
        this.state = 243;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
        case GrammarParser.TYPE:
        case GrammarParser.CLASS_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 241;
            this.referenceType();
            break;
        case GrammarParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 242;
            this.wildcard();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WildcardContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_wildcard;
    return this;
}

WildcardContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WildcardContext.prototype.constructor = WildcardContext;

WildcardContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

WildcardContext.prototype.wildcardBounds = function() {
    return this.getTypedRuleContext(WildcardBoundsContext,0);
};

WildcardContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterWildcard(this);
	}
};

WildcardContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitWildcard(this);
	}
};

WildcardContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitWildcard(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.WildcardContext = WildcardContext;

GrammarParser.prototype.wildcard = function() {

    var localctx = new WildcardContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, GrammarParser.RULE_wildcard);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 245;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.EXTENDS || _la===GrammarParser.SUPER) {
            this.state = 246;
            this.wildcardBounds();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WildcardBoundsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_wildcardBounds;
    return this;
}

WildcardBoundsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WildcardBoundsContext.prototype.constructor = WildcardBoundsContext;

WildcardBoundsContext.prototype.EXTENDS = function() {
    return this.getToken(GrammarParser.EXTENDS, 0);
};

WildcardBoundsContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

WildcardBoundsContext.prototype.SUPER = function() {
    return this.getToken(GrammarParser.SUPER, 0);
};

WildcardBoundsContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterWildcardBounds(this);
	}
};

WildcardBoundsContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitWildcardBounds(this);
	}
};

WildcardBoundsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitWildcardBounds(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.WildcardBoundsContext = WildcardBoundsContext;

GrammarParser.prototype.wildcardBounds = function() {

    var localctx = new WildcardBoundsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, GrammarParser.RULE_wildcardBounds);
    try {
        this.state = 253;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.EXTENDS:
            this.enterOuterAlt(localctx, 1);
            this.state = 249;
            this.match(GrammarParser.EXTENDS);
            this.state = 250;
            this.referenceType();
            break;
        case GrammarParser.SUPER:
            this.enterOuterAlt(localctx, 2);
            this.state = 251;
            this.match(GrammarParser.SUPER);
            this.state = 252;
            this.referenceType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function String_dot_splittedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_string_dot_splitted;
    return this;
}

String_dot_splittedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_dot_splittedContext.prototype.constructor = String_dot_splittedContext;

String_dot_splittedContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

String_dot_splittedContext.prototype.CLASS_IDENTIFIER = function() {
    return this.getToken(GrammarParser.CLASS_IDENTIFIER, 0);
};

String_dot_splittedContext.prototype.string_dot_splitted = function() {
    return this.getTypedRuleContext(String_dot_splittedContext,0);
};

String_dot_splittedContext.prototype.DOT = function() {
    return this.getToken(GrammarParser.DOT, 0);
};

String_dot_splittedContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterString_dot_splitted(this);
	}
};

String_dot_splittedContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitString_dot_splitted(this);
	}
};

String_dot_splittedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitString_dot_splitted(this);
    } else {
        return visitor.visitChildren(this);
    }
};



GrammarParser.prototype.string_dot_splitted = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new String_dot_splittedContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 30;
    this.enterRecursionRule(localctx, 30, GrammarParser.RULE_string_dot_splitted, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        _la = this._input.LA(1);
        if(!(_la===GrammarParser.CLASS_IDENTIFIER || _la===GrammarParser.IDENTIFIER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 263;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new String_dot_splittedContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_string_dot_splitted);
                this.state = 258;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 259;
                this.match(GrammarParser.DOT);
                this.state = 260;
                _la = this._input.LA(1);
                if(!(_la===GrammarParser.CLASS_IDENTIFIER || _la===GrammarParser.IDENTIFIER)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                } 
            }
            this.state = 265;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ArgumentListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_argumentList;
    return this;
}

ArgumentListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentListContext.prototype.constructor = ArgumentListContext;

ArgumentListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArgumentListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


ArgumentListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterArgumentList(this);
	}
};

ArgumentListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitArgumentList(this);
	}
};

ArgumentListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitArgumentList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ArgumentListContext = ArgumentListContext;

GrammarParser.prototype.argumentList = function() {

    var localctx = new ArgumentListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, GrammarParser.RULE_argumentList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.expression();
        this.state = 271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 267;
            this.match(GrammarParser.COMMA);
            this.state = 268;
            this.expression();
            this.state = 273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodName;
    return this;
}

MethodNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodNameContext.prototype.constructor = MethodNameContext;

MethodNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

MethodNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodName(this);
	}
};

MethodNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodName(this);
	}
};

MethodNameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodName(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodNameContext = MethodNameContext;

GrammarParser.prototype.methodName = function() {

    var localctx = new MethodNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, GrammarParser.RULE_methodName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 274;
        this.match(GrammarParser.IDENTIFIER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PackageDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_packageDeclaration;
    return this;
}

PackageDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageDeclarationContext.prototype.constructor = PackageDeclarationContext;

PackageDeclarationContext.prototype.PACKAGE = function() {
    return this.getToken(GrammarParser.PACKAGE, 0);
};

PackageDeclarationContext.prototype.string_dot_splitted = function() {
    return this.getTypedRuleContext(String_dot_splittedContext,0);
};

PackageDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

PackageDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterPackageDeclaration(this);
	}
};

PackageDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitPackageDeclaration(this);
	}
};

PackageDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitPackageDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.PackageDeclarationContext = PackageDeclarationContext;

GrammarParser.prototype.packageDeclaration = function() {

    var localctx = new PackageDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, GrammarParser.RULE_packageDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 276;
        this.match(GrammarParser.PACKAGE);
        this.state = 277;
        this.string_dot_splitted(0);
        this.state = 278;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.IMPORT = function() {
    return this.getToken(GrammarParser.IMPORT, 0);
};

ImportDeclarationContext.prototype.string_dot_splitted = function() {
    return this.getTypedRuleContext(String_dot_splittedContext,0);
};

ImportDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

ImportDeclarationContext.prototype.STATIC = function() {
    return this.getToken(GrammarParser.STATIC, 0);
};

ImportDeclarationContext.prototype.DOT = function() {
    return this.getToken(GrammarParser.DOT, 0);
};

ImportDeclarationContext.prototype.MUL = function() {
    return this.getToken(GrammarParser.MUL, 0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitImportDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ImportDeclarationContext = ImportDeclarationContext;

GrammarParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, GrammarParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 280;
        this.match(GrammarParser.IMPORT);
        this.state = 282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.STATIC) {
            this.state = 281;
            this.match(GrammarParser.STATIC);
        }

        this.state = 284;
        this.string_dot_splitted(0);
        this.state = 287;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.DOT) {
            this.state = 285;
            this.match(GrammarParser.DOT);
            this.state = 286;
            this.match(GrammarParser.MUL);
        }

        this.state = 289;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.CLASS = function() {
    return this.getToken(GrammarParser.CLASS, 0);
};

ClassDeclarationContext.prototype.CLASS_IDENTIFIER = function() {
    return this.getToken(GrammarParser.CLASS_IDENTIFIER, 0);
};

ClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassDeclarationContext.prototype.classModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassModifierContext);
    } else {
        return this.getTypedRuleContext(ClassModifierContext,i);
    }
};

ClassDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

ClassDeclarationContext.prototype.superclass = function() {
    return this.getTypedRuleContext(SuperclassContext,0);
};

ClassDeclarationContext.prototype.superinterfaces = function() {
    return this.getTypedRuleContext(SuperinterfacesContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitClassDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ClassDeclarationContext = ClassDeclarationContext;

GrammarParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, GrammarParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.ABSTRACT || _la===GrammarParser.FINAL || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)) | (1 << (GrammarParser.STATIC - 35)))) !== 0)) {
            this.state = 291;
            this.classModifier();
            this.state = 296;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 297;
        this.match(GrammarParser.CLASS);
        this.state = 298;
        this.match(GrammarParser.CLASS_IDENTIFIER);
        this.state = 300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LT) {
            this.state = 299;
            this.typeParameters();
        }

        this.state = 303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.EXTENDS) {
            this.state = 302;
            this.superclass();
        }

        this.state = 306;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.IMPLEMENTS) {
            this.state = 305;
            this.superinterfaces();
        }

        this.state = 308;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_classModifier;
    return this;
}

ClassModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassModifierContext.prototype.constructor = ClassModifierContext;

ClassModifierContext.prototype.PUBLIC = function() {
    return this.getToken(GrammarParser.PUBLIC, 0);
};

ClassModifierContext.prototype.PROTECTED = function() {
    return this.getToken(GrammarParser.PROTECTED, 0);
};

ClassModifierContext.prototype.PRIVATE = function() {
    return this.getToken(GrammarParser.PRIVATE, 0);
};

ClassModifierContext.prototype.ABSTRACT = function() {
    return this.getToken(GrammarParser.ABSTRACT, 0);
};

ClassModifierContext.prototype.STATIC = function() {
    return this.getToken(GrammarParser.STATIC, 0);
};

ClassModifierContext.prototype.FINAL = function() {
    return this.getToken(GrammarParser.FINAL, 0);
};

ClassModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterClassModifier(this);
	}
};

ClassModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitClassModifier(this);
	}
};

ClassModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitClassModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ClassModifierContext = ClassModifierContext;

GrammarParser.prototype.classModifier = function() {

    var localctx = new ClassModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, GrammarParser.RULE_classModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 310;
        _la = this._input.LA(1);
        if(!(_la===GrammarParser.ABSTRACT || _la===GrammarParser.FINAL || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)) | (1 << (GrammarParser.STATIC - 35)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeParameters;
    return this;
}

TypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParametersContext.prototype.constructor = TypeParametersContext;

TypeParametersContext.prototype.LT = function() {
    return this.getToken(GrammarParser.LT, 0);
};

TypeParametersContext.prototype.typeParameterList = function() {
    return this.getTypedRuleContext(TypeParameterListContext,0);
};

TypeParametersContext.prototype.GT = function() {
    return this.getToken(GrammarParser.GT, 0);
};

TypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeParameters(this);
	}
};

TypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeParameters(this);
	}
};

TypeParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeParametersContext = TypeParametersContext;

GrammarParser.prototype.typeParameters = function() {

    var localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, GrammarParser.RULE_typeParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 312;
        this.match(GrammarParser.LT);
        this.state = 313;
        this.typeParameterList();
        this.state = 314;
        this.match(GrammarParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeArgumentsOrEmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeArgumentsOrEmpty;
    return this;
}

TypeArgumentsOrEmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsOrEmptyContext.prototype.constructor = TypeArgumentsOrEmptyContext;

TypeArgumentsOrEmptyContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

TypeArgumentsOrEmptyContext.prototype.LT = function() {
    return this.getToken(GrammarParser.LT, 0);
};

TypeArgumentsOrEmptyContext.prototype.GT = function() {
    return this.getToken(GrammarParser.GT, 0);
};

TypeArgumentsOrEmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeArgumentsOrEmpty(this);
	}
};

TypeArgumentsOrEmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeArgumentsOrEmpty(this);
	}
};

TypeArgumentsOrEmptyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeArgumentsOrEmpty(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeArgumentsOrEmptyContext = TypeArgumentsOrEmptyContext;

GrammarParser.prototype.typeArgumentsOrEmpty = function() {

    var localctx = new TypeArgumentsOrEmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, GrammarParser.RULE_typeArgumentsOrEmpty);
    try {
        this.state = 319;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 316;
            this.typeParameters();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 317;
            this.match(GrammarParser.LT);
            this.state = 318;
            this.match(GrammarParser.GT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TypeParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_typeParameterList;
    return this;
}

TypeParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterListContext.prototype.constructor = TypeParameterListContext;

TypeParameterListContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


TypeParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterTypeParameterList(this);
	}
};

TypeParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitTypeParameterList(this);
	}
};

TypeParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitTypeParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.TypeParameterListContext = TypeParameterListContext;

GrammarParser.prototype.typeParameterList = function() {

    var localctx = new TypeParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, GrammarParser.RULE_typeParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.typeParameter();
        this.state = 326;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 322;
            this.match(GrammarParser.COMMA);
            this.state = 323;
            this.typeParameter();
            this.state = 328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SuperclassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_superclass;
    return this;
}

SuperclassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperclassContext.prototype.constructor = SuperclassContext;

SuperclassContext.prototype.EXTENDS = function() {
    return this.getToken(GrammarParser.EXTENDS, 0);
};

SuperclassContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

SuperclassContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterSuperclass(this);
	}
};

SuperclassContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitSuperclass(this);
	}
};

SuperclassContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitSuperclass(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.SuperclassContext = SuperclassContext;

GrammarParser.prototype.superclass = function() {

    var localctx = new SuperclassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, GrammarParser.RULE_superclass);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(GrammarParser.EXTENDS);
        this.state = 330;
        this.classType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SuperinterfacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_superinterfaces;
    return this;
}

SuperinterfacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperinterfacesContext.prototype.constructor = SuperinterfacesContext;

SuperinterfacesContext.prototype.IMPLEMENTS = function() {
    return this.getToken(GrammarParser.IMPLEMENTS, 0);
};

SuperinterfacesContext.prototype.classTypeList = function() {
    return this.getTypedRuleContext(ClassTypeListContext,0);
};

SuperinterfacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterSuperinterfaces(this);
	}
};

SuperinterfacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitSuperinterfaces(this);
	}
};

SuperinterfacesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitSuperinterfaces(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.SuperinterfacesContext = SuperinterfacesContext;

GrammarParser.prototype.superinterfaces = function() {

    var localctx = new SuperinterfacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, GrammarParser.RULE_superinterfaces);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.match(GrammarParser.IMPLEMENTS);
        this.state = 333;
        this.classTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_classTypeList;
    return this;
}

ClassTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassTypeListContext.prototype.constructor = ClassTypeListContext;

ClassTypeListContext.prototype.classType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassTypeContext);
    } else {
        return this.getTypedRuleContext(ClassTypeContext,i);
    }
};

ClassTypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


ClassTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterClassTypeList(this);
	}
};

ClassTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitClassTypeList(this);
	}
};

ClassTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitClassTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ClassTypeListContext = ClassTypeListContext;

GrammarParser.prototype.classTypeList = function() {

    var localctx = new ClassTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, GrammarParser.RULE_classTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 335;
        this.classType();
        this.state = 340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 336;
            this.match(GrammarParser.COMMA);
            this.state = 337;
            this.classType();
            this.state = 342;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

ClassBodyContext.prototype.RBRACE = function() {
    return this.getToken(GrammarParser.RBRACE, 0);
};

ClassBodyContext.prototype.classMemberDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassMemberDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassMemberDeclarationContext,i);
    }
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitClassBody(this);
	}
};

ClassBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitClassBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ClassBodyContext = ClassBodyContext;

GrammarParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, GrammarParser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 343;
        this.match(GrammarParser.LBRACE);
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.ABSTRACT) | (1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.CLASS) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG) | (1 << GrammarParser.NATIVE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)) | (1 << (GrammarParser.SHORT - 35)) | (1 << (GrammarParser.STATIC - 35)) | (1 << (GrammarParser.SYNCHRONIZED - 35)) | (1 << (GrammarParser.TRANSIENT - 35)) | (1 << (GrammarParser.VOID - 35)) | (1 << (GrammarParser.VOLATILE - 35)) | (1 << (GrammarParser.TYPE - 35)) | (1 << (GrammarParser.CLASS_IDENTIFIER - 35)))) !== 0) || _la===GrammarParser.LT) {
            this.state = 344;
            this.classMemberDeclaration();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 350;
        this.match(GrammarParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_classMemberDeclaration;
    return this;
}

ClassMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMemberDeclarationContext.prototype.constructor = ClassMemberDeclarationContext;

ClassMemberDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

ClassMemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterClassMemberDeclaration(this);
	}
};

ClassMemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitClassMemberDeclaration(this);
	}
};

ClassMemberDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitClassMemberDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ClassMemberDeclarationContext = ClassMemberDeclarationContext;

GrammarParser.prototype.classMemberDeclaration = function() {

    var localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, GrammarParser.RULE_classMemberDeclaration);
    try {
        this.state = 356;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 352;
            this.fieldDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 353;
            this.methodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 354;
            this.constructorDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 355;
            this.classDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.variableDeclaratorList = function() {
    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
};

FieldDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

FieldDeclarationContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

FieldDeclarationContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

FieldDeclarationContext.prototype.fieldModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldModifierContext);
    } else {
        return this.getTypedRuleContext(FieldModifierContext,i);
    }
};

FieldDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitFieldDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FieldDeclarationContext = FieldDeclarationContext;

GrammarParser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, GrammarParser.RULE_fieldDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)) | (1 << (GrammarParser.STATIC - 35)) | (1 << (GrammarParser.TRANSIENT - 35)) | (1 << (GrammarParser.VOLATILE - 35)))) !== 0)) {
            this.state = 358;
            this.fieldModifier();
            this.state = 363;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 366;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
        switch(la_) {
        case 1:
            this.state = 364;
            this.primitiveType();
            break;

        case 2:
            this.state = 365;
            this.referenceType();
            break;

        }
        this.state = 368;
        this.variableDeclaratorList();
        this.state = 369;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_fieldModifier;
    return this;
}

FieldModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldModifierContext.prototype.constructor = FieldModifierContext;

FieldModifierContext.prototype.PUBLIC = function() {
    return this.getToken(GrammarParser.PUBLIC, 0);
};

FieldModifierContext.prototype.PROTECTED = function() {
    return this.getToken(GrammarParser.PROTECTED, 0);
};

FieldModifierContext.prototype.PRIVATE = function() {
    return this.getToken(GrammarParser.PRIVATE, 0);
};

FieldModifierContext.prototype.TRANSIENT = function() {
    return this.getToken(GrammarParser.TRANSIENT, 0);
};

FieldModifierContext.prototype.VOLATILE = function() {
    return this.getToken(GrammarParser.VOLATILE, 0);
};

FieldModifierContext.prototype.STATIC = function() {
    return this.getToken(GrammarParser.STATIC, 0);
};

FieldModifierContext.prototype.FINAL = function() {
    return this.getToken(GrammarParser.FINAL, 0);
};

FieldModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFieldModifier(this);
	}
};

FieldModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFieldModifier(this);
	}
};

FieldModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitFieldModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FieldModifierContext = FieldModifierContext;

GrammarParser.prototype.fieldModifier = function() {

    var localctx = new FieldModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, GrammarParser.RULE_fieldModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 371;
        _la = this._input.LA(1);
        if(!(_la===GrammarParser.FINAL || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)) | (1 << (GrammarParser.STATIC - 35)) | (1 << (GrammarParser.TRANSIENT - 35)) | (1 << (GrammarParser.VOLATILE - 35)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableDeclaratorList;
    return this;
}

VariableDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorListContext.prototype.constructor = VariableDeclaratorListContext;

VariableDeclaratorListContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


VariableDeclaratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableDeclaratorList(this);
	}
};

VariableDeclaratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableDeclaratorList(this);
	}
};

VariableDeclaratorListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableDeclaratorList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableDeclaratorListContext = VariableDeclaratorListContext;

GrammarParser.prototype.variableDeclaratorList = function() {

    var localctx = new VariableDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, GrammarParser.RULE_variableDeclaratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 373;
        this.variableDeclarator();
        this.state = 378;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 374;
            this.match(GrammarParser.COMMA);
            this.state = 375;
            this.variableDeclarator();
            this.state = 380;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

VariableDeclaratorContext.prototype.ASSIGN = function() {
    return this.getToken(GrammarParser.ASSIGN, 0);
};

VariableDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

VariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableDeclaratorContext = VariableDeclaratorContext;

GrammarParser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, GrammarParser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 381;
        this.variableDeclaratorId();
        this.state = 384;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.ASSIGN) {
            this.state = 382;
            this.match(GrammarParser.ASSIGN);
            this.state = 383;
            this.variableInitializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableDeclaratorId;
    return this;
}

VariableDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorIdContext.prototype.constructor = VariableDeclaratorIdContext;

VariableDeclaratorIdContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

VariableDeclaratorIdContext.prototype.brackets_square = function() {
    return this.getTypedRuleContext(Brackets_squareContext,0);
};

VariableDeclaratorIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableDeclaratorId(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;

GrammarParser.prototype.variableDeclaratorId = function() {

    var localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, GrammarParser.RULE_variableDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 388;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LSQUARE) {
            this.state = 387;
            this.brackets_square();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.primitive = function() {
    return this.getTypedRuleContext(PrimitiveContext,0);
};

VariableInitializerContext.prototype.classInstanceCreationExpression = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
};

VariableInitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

VariableInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableInitializerContext = VariableInitializerContext;

GrammarParser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, GrammarParser.RULE_variableInitializer);
    try {
        this.state = 393;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.NULL:
        case GrammarParser.INTEGER_VALUE:
        case GrammarParser.DOUBLE_VALUE:
        case GrammarParser.BOOLEAN_VALUE:
        case GrammarParser.STRING_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 390;
            this.primitive();
            break;
        case GrammarParser.NEW:
            this.enterOuterAlt(localctx, 2);
            this.state = 391;
            this.classInstanceCreationExpression();
            break;
        case GrammarParser.LBRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 392;
            this.arrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.methodHeader = function() {
    return this.getTypedRuleContext(MethodHeaderContext,0);
};

MethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

MethodDeclarationContext.prototype.methodModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodModifierContext);
    } else {
        return this.getTypedRuleContext(MethodModifierContext,i);
    }
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodDeclarationContext = MethodDeclarationContext;

GrammarParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, GrammarParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.ABSTRACT) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.NATIVE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)) | (1 << (GrammarParser.STATIC - 35)) | (1 << (GrammarParser.SYNCHRONIZED - 35)))) !== 0)) {
            this.state = 395;
            this.methodModifier();
            this.state = 400;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 401;
        this.methodHeader();
        this.state = 402;
        this.methodBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodModifier;
    return this;
}

MethodModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodModifierContext.prototype.constructor = MethodModifierContext;

MethodModifierContext.prototype.PUBLIC = function() {
    return this.getToken(GrammarParser.PUBLIC, 0);
};

MethodModifierContext.prototype.PROTECTED = function() {
    return this.getToken(GrammarParser.PROTECTED, 0);
};

MethodModifierContext.prototype.PRIVATE = function() {
    return this.getToken(GrammarParser.PRIVATE, 0);
};

MethodModifierContext.prototype.ABSTRACT = function() {
    return this.getToken(GrammarParser.ABSTRACT, 0);
};

MethodModifierContext.prototype.STATIC = function() {
    return this.getToken(GrammarParser.STATIC, 0);
};

MethodModifierContext.prototype.FINAL = function() {
    return this.getToken(GrammarParser.FINAL, 0);
};

MethodModifierContext.prototype.SYNCHRONIZED = function() {
    return this.getToken(GrammarParser.SYNCHRONIZED, 0);
};

MethodModifierContext.prototype.NATIVE = function() {
    return this.getToken(GrammarParser.NATIVE, 0);
};

MethodModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodModifier(this);
	}
};

MethodModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodModifier(this);
	}
};

MethodModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodModifierContext = MethodModifierContext;

GrammarParser.prototype.methodModifier = function() {

    var localctx = new MethodModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, GrammarParser.RULE_methodModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 404;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.ABSTRACT) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.NATIVE))) !== 0) || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)) | (1 << (GrammarParser.STATIC - 35)) | (1 << (GrammarParser.SYNCHRONIZED - 35)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodHeaderContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodHeader;
    return this;
}

MethodHeaderContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodHeaderContext.prototype.constructor = MethodHeaderContext;

MethodHeaderContext.prototype.result = function() {
    return this.getTypedRuleContext(ResultContext,0);
};

MethodHeaderContext.prototype.methodDeclarator = function() {
    return this.getTypedRuleContext(MethodDeclaratorContext,0);
};

MethodHeaderContext.prototype.throws_ = function() {
    return this.getTypedRuleContext(Throws_Context,0);
};

MethodHeaderContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

MethodHeaderContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodHeader(this);
	}
};

MethodHeaderContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodHeader(this);
	}
};

MethodHeaderContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodHeader(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodHeaderContext = MethodHeaderContext;

GrammarParser.prototype.methodHeader = function() {

    var localctx = new MethodHeaderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, GrammarParser.RULE_methodHeader);
    var _la = 0; // Token type
    try {
        this.state = 417;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
        case GrammarParser.VOID:
        case GrammarParser.TYPE:
        case GrammarParser.CLASS_IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 406;
            this.result();
            this.state = 407;
            this.methodDeclarator();
            this.state = 409;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.THROWS) {
                this.state = 408;
                this.throws_();
            }

            break;
        case GrammarParser.LT:
            this.enterOuterAlt(localctx, 2);
            this.state = 411;
            this.typeParameters();
            this.state = 412;
            this.result();
            this.state = 413;
            this.methodDeclarator();
            this.state = 415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.THROWS) {
                this.state = 414;
                this.throws_();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ResultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_result;
    return this;
}

ResultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResultContext.prototype.constructor = ResultContext;

ResultContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

ResultContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

ResultContext.prototype.TYPE = function() {
    return this.getToken(GrammarParser.TYPE, 0);
};

ResultContext.prototype.VOID = function() {
    return this.getToken(GrammarParser.VOID, 0);
};

ResultContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterResult(this);
	}
};

ResultContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitResult(this);
	}
};

ResultContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitResult(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ResultContext = ResultContext;

GrammarParser.prototype.result = function() {

    var localctx = new ResultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, GrammarParser.RULE_result);
    try {
        this.state = 423;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 419;
            this.primitiveType();
            break;
        case GrammarParser.CLASS_IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 420;
            this.classType();
            break;
        case GrammarParser.TYPE:
            this.enterOuterAlt(localctx, 3);
            this.state = 421;
            this.match(GrammarParser.TYPE);
            break;
        case GrammarParser.VOID:
            this.enterOuterAlt(localctx, 4);
            this.state = 422;
            this.match(GrammarParser.VOID);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodDeclarator;
    return this;
}

MethodDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclaratorContext.prototype.constructor = MethodDeclaratorContext;

MethodDeclaratorContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

MethodDeclaratorContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

MethodDeclaratorContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

MethodDeclaratorContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

MethodDeclaratorContext.prototype.brackets_square = function() {
    return this.getTypedRuleContext(Brackets_squareContext,0);
};

MethodDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodDeclarator(this);
	}
};

MethodDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodDeclarator(this);
	}
};

MethodDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodDeclaratorContext = MethodDeclaratorContext;

GrammarParser.prototype.methodDeclarator = function() {

    var localctx = new MethodDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, GrammarParser.RULE_methodDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 425;
        this.match(GrammarParser.IDENTIFIER);
        this.state = 426;
        this.match(GrammarParser.LPAREN);
        this.state = 428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (GrammarParser.SHORT - 39)) | (1 << (GrammarParser.TYPE - 39)) | (1 << (GrammarParser.CLASS_IDENTIFIER - 39)))) !== 0)) {
            this.state = 427;
            this.formalParameterList();
        }

        this.state = 430;
        this.match(GrammarParser.RPAREN);
        this.state = 432;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LSQUARE) {
            this.state = 431;
            this.brackets_square();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitFormalParameterList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FormalParameterListContext = FormalParameterListContext;

GrammarParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, GrammarParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 434;
        this.formalParameter();
        this.state = 439;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 435;
            this.match(GrammarParser.COMMA);
            this.state = 436;
            this.formalParameter();
            this.state = 441;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

FormalParameterContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

FormalParameterContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

FormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitFormalParameter(this);
	}
};

FormalParameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitFormalParameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.FormalParameterContext = FormalParameterContext;

GrammarParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, GrammarParser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL) {
            this.state = 442;
            this.variableModifier();
            this.state = 447;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 450;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.state = 448;
            this.primitiveType();
            break;

        case 2:
            this.state = 449;
            this.referenceType();
            break;

        }
        this.state = 452;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.FINAL = function() {
    return this.getToken(GrammarParser.FINAL, 0);
};

VariableModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableModifier(this);
	}
};

VariableModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableModifier(this);
	}
};

VariableModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableModifierContext = VariableModifierContext;

GrammarParser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, GrammarParser.RULE_variableModifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this.match(GrammarParser.FINAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Throws_Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_throws_;
    return this;
}

Throws_Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Throws_Context.prototype.constructor = Throws_Context;

Throws_Context.prototype.THROWS = function() {
    return this.getToken(GrammarParser.THROWS, 0);
};

Throws_Context.prototype.exceptionTypeList = function() {
    return this.getTypedRuleContext(ExceptionTypeListContext,0);
};

Throws_Context.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterThrows_(this);
	}
};

Throws_Context.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitThrows_(this);
	}
};

Throws_Context.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitThrows_(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.Throws_Context = Throws_Context;

GrammarParser.prototype.throws_ = function() {

    var localctx = new Throws_Context(this, this._ctx, this.state);
    this.enterRule(localctx, 88, GrammarParser.RULE_throws_);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 456;
        this.match(GrammarParser.THROWS);
        this.state = 457;
        this.exceptionTypeList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_exceptionTypeList;
    return this;
}

ExceptionTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionTypeListContext.prototype.constructor = ExceptionTypeListContext;

ExceptionTypeListContext.prototype.exceptionType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExceptionTypeContext);
    } else {
        return this.getTypedRuleContext(ExceptionTypeContext,i);
    }
};

ExceptionTypeListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


ExceptionTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExceptionTypeList(this);
	}
};

ExceptionTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExceptionTypeList(this);
	}
};

ExceptionTypeListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitExceptionTypeList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExceptionTypeListContext = ExceptionTypeListContext;

GrammarParser.prototype.exceptionTypeList = function() {

    var localctx = new ExceptionTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, GrammarParser.RULE_exceptionTypeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.exceptionType();
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.COMMA) {
            this.state = 460;
            this.match(GrammarParser.COMMA);
            this.state = 461;
            this.exceptionType();
            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExceptionTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_exceptionType;
    return this;
}

ExceptionTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExceptionTypeContext.prototype.constructor = ExceptionTypeContext;

ExceptionTypeContext.prototype.classType = function() {
    return this.getTypedRuleContext(ClassTypeContext,0);
};

ExceptionTypeContext.prototype.variableType = function() {
    return this.getTypedRuleContext(VariableTypeContext,0);
};

ExceptionTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExceptionType(this);
	}
};

ExceptionTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExceptionType(this);
	}
};

ExceptionTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitExceptionType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExceptionTypeContext = ExceptionTypeContext;

GrammarParser.prototype.exceptionType = function() {

    var localctx = new ExceptionTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, GrammarParser.RULE_exceptionType);
    try {
        this.state = 469;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 467;
            this.classType();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 468;
            this.variableType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodBody(this);
	}
};

MethodBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodBodyContext = MethodBodyContext;

GrammarParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, GrammarParser.RULE_methodBody);
    try {
        this.state = 473;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 471;
            this.block();
            break;
        case GrammarParser.SEMICOLON:
            this.enterOuterAlt(localctx, 2);
            this.state = 472;
            this.match(GrammarParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_constructorDeclaration;
    return this;
}

ConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclarationContext.prototype.constructor = ConstructorDeclarationContext;

ConstructorDeclarationContext.prototype.constructorDeclarator = function() {
    return this.getTypedRuleContext(ConstructorDeclaratorContext,0);
};

ConstructorDeclarationContext.prototype.constructorBody = function() {
    return this.getTypedRuleContext(ConstructorBodyContext,0);
};

ConstructorDeclarationContext.prototype.constructorModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructorModifierContext);
    } else {
        return this.getTypedRuleContext(ConstructorModifierContext,i);
    }
};

ConstructorDeclarationContext.prototype.throws_ = function() {
    return this.getTypedRuleContext(Throws_Context,0);
};

ConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitConstructorDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ConstructorDeclarationContext = ConstructorDeclarationContext;

GrammarParser.prototype.constructorDeclaration = function() {

    var localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, GrammarParser.RULE_constructorDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 478;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)))) !== 0)) {
            this.state = 475;
            this.constructorModifier();
            this.state = 480;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 481;
        this.constructorDeclarator();
        this.state = 483;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.THROWS) {
            this.state = 482;
            this.throws_();
        }

        this.state = 485;
        this.constructorBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstructorModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_constructorModifier;
    return this;
}

ConstructorModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorModifierContext.prototype.constructor = ConstructorModifierContext;

ConstructorModifierContext.prototype.PUBLIC = function() {
    return this.getToken(GrammarParser.PUBLIC, 0);
};

ConstructorModifierContext.prototype.PROTECTED = function() {
    return this.getToken(GrammarParser.PROTECTED, 0);
};

ConstructorModifierContext.prototype.PRIVATE = function() {
    return this.getToken(GrammarParser.PRIVATE, 0);
};

ConstructorModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConstructorModifier(this);
	}
};

ConstructorModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConstructorModifier(this);
	}
};

ConstructorModifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitConstructorModifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ConstructorModifierContext = ConstructorModifierContext;

GrammarParser.prototype.constructorModifier = function() {

    var localctx = new ConstructorModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, GrammarParser.RULE_constructorModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 487;
        _la = this._input.LA(1);
        if(!(((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (GrammarParser.PRIVATE - 35)) | (1 << (GrammarParser.PROTECTED - 35)) | (1 << (GrammarParser.PUBLIC - 35)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstructorDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_constructorDeclarator;
    return this;
}

ConstructorDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclaratorContext.prototype.constructor = ConstructorDeclaratorContext;

ConstructorDeclaratorContext.prototype.CLASS_IDENTIFIER = function() {
    return this.getToken(GrammarParser.CLASS_IDENTIFIER, 0);
};

ConstructorDeclaratorContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ConstructorDeclaratorContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ConstructorDeclaratorContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

ConstructorDeclaratorContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

ConstructorDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConstructorDeclarator(this);
	}
};

ConstructorDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConstructorDeclarator(this);
	}
};

ConstructorDeclaratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitConstructorDeclarator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ConstructorDeclaratorContext = ConstructorDeclaratorContext;

GrammarParser.prototype.constructorDeclarator = function() {

    var localctx = new ConstructorDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, GrammarParser.RULE_constructorDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LT) {
            this.state = 489;
            this.typeParameters();
        }

        this.state = 492;
        this.match(GrammarParser.CLASS_IDENTIFIER);
        this.state = 493;
        this.match(GrammarParser.LPAREN);
        this.state = 495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG))) !== 0) || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (GrammarParser.SHORT - 39)) | (1 << (GrammarParser.TYPE - 39)) | (1 << (GrammarParser.CLASS_IDENTIFIER - 39)))) !== 0)) {
            this.state = 494;
            this.formalParameterList();
        }

        this.state = 497;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstructorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_constructorBody;
    return this;
}

ConstructorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorBodyContext.prototype.constructor = ConstructorBodyContext;

ConstructorBodyContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

ConstructorBodyContext.prototype.RBRACE = function() {
    return this.getToken(GrammarParser.RBRACE, 0);
};

ConstructorBodyContext.prototype.explicitConstructorInvocation = function() {
    return this.getTypedRuleContext(ExplicitConstructorInvocationContext,0);
};

ConstructorBodyContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

ConstructorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitConstructorBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ConstructorBodyContext = ConstructorBodyContext;

GrammarParser.prototype.constructorBody = function() {

    var localctx = new ConstructorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, GrammarParser.RULE_constructorBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        this.match(GrammarParser.LBRACE);
        this.state = 501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.SUPER || _la===GrammarParser.THIS || _la===GrammarParser.LT) {
            this.state = 500;
            this.explicitConstructorInvocation();
        }

        this.state = 506;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BREAK) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.CONTINUE) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.FOR) | (1 << GrammarParser.IF) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.NEW - 32)) | (1 << (GrammarParser.NULL - 32)) | (1 << (GrammarParser.RETURN - 32)) | (1 << (GrammarParser.SHORT - 32)) | (1 << (GrammarParser.WHILE - 32)) | (1 << (GrammarParser.TYPE - 32)) | (1 << (GrammarParser.INTEGER_VALUE - 32)) | (1 << (GrammarParser.DOUBLE_VALUE - 32)) | (1 << (GrammarParser.BOOLEAN_VALUE - 32)) | (1 << (GrammarParser.STRING_VALUE - 32)) | (1 << (GrammarParser.CLASS_IDENTIFIER - 32)) | (1 << (GrammarParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GrammarParser.LPAREN - 65)) | (1 << (GrammarParser.INC - 65)) | (1 << (GrammarParser.DEC - 65)))) !== 0)) {
            this.state = 503;
            this.statement();
            this.state = 508;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 509;
        this.match(GrammarParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplicitConstructorInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_explicitConstructorInvocation;
    return this;
}

ExplicitConstructorInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitConstructorInvocationContext.prototype.constructor = ExplicitConstructorInvocationContext;

ExplicitConstructorInvocationContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ExplicitConstructorInvocationContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ExplicitConstructorInvocationContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

ExplicitConstructorInvocationContext.prototype.THIS = function() {
    return this.getToken(GrammarParser.THIS, 0);
};

ExplicitConstructorInvocationContext.prototype.SUPER = function() {
    return this.getToken(GrammarParser.SUPER, 0);
};

ExplicitConstructorInvocationContext.prototype.argumentsType = function() {
    return this.getTypedRuleContext(ArgumentsTypeContext,0);
};

ExplicitConstructorInvocationContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ExplicitConstructorInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExplicitConstructorInvocation(this);
	}
};

ExplicitConstructorInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExplicitConstructorInvocation(this);
	}
};

ExplicitConstructorInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitExplicitConstructorInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext;

GrammarParser.prototype.explicitConstructorInvocation = function() {

    var localctx = new ExplicitConstructorInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, GrammarParser.RULE_explicitConstructorInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LT) {
            this.state = 511;
            this.argumentsType();
        }

        this.state = 514;
        _la = this._input.LA(1);
        if(!(_la===GrammarParser.SUPER || _la===GrammarParser.THIS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 515;
        this.match(GrammarParser.LPAREN);
        this.state = 517;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.NEW - 32)) | (1 << (GrammarParser.NULL - 32)) | (1 << (GrammarParser.INTEGER_VALUE - 32)) | (1 << (GrammarParser.DOUBLE_VALUE - 32)) | (1 << (GrammarParser.BOOLEAN_VALUE - 32)) | (1 << (GrammarParser.STRING_VALUE - 32)) | (1 << (GrammarParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GrammarParser.LPAREN - 65)) | (1 << (GrammarParser.PLUS - 65)) | (1 << (GrammarParser.MINUS - 65)) | (1 << (GrammarParser.INC - 65)) | (1 << (GrammarParser.DEC - 65)) | (1 << (GrammarParser.NOT - 65)))) !== 0)) {
            this.state = 516;
            this.argumentList();
        }

        this.state = 519;
        this.match(GrammarParser.RPAREN);
        this.state = 520;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

ArrayInitializerContext.prototype.RBRACE = function() {
    return this.getToken(GrammarParser.RBRACE, 0);
};

ArrayInitializerContext.prototype.variableInitializerList = function() {
    return this.getTypedRuleContext(VariableInitializerListContext,0);
};

ArrayInitializerContext.prototype.COMMA = function() {
    return this.getToken(GrammarParser.COMMA, 0);
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitArrayInitializer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ArrayInitializerContext = ArrayInitializerContext;

GrammarParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, GrammarParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 522;
        this.match(GrammarParser.LBRACE);
        this.state = 527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.NEW - 32)) | (1 << (GrammarParser.NULL - 32)) | (1 << (GrammarParser.INTEGER_VALUE - 32)) | (1 << (GrammarParser.DOUBLE_VALUE - 32)) | (1 << (GrammarParser.BOOLEAN_VALUE - 32)) | (1 << (GrammarParser.STRING_VALUE - 32)))) !== 0) || _la===GrammarParser.LBRACE) {
            this.state = 523;
            this.variableInitializerList();
            this.state = 525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.COMMA) {
                this.state = 524;
                this.match(GrammarParser.COMMA);
            }

        }

        this.state = 529;
        this.match(GrammarParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VariableInitializerListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_variableInitializerList;
    return this;
}

VariableInitializerListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerListContext.prototype.constructor = VariableInitializerListContext;

VariableInitializerListContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

VariableInitializerListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.COMMA);
    } else {
        return this.getToken(GrammarParser.COMMA, i);
    }
};


VariableInitializerListContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterVariableInitializerList(this);
	}
};

VariableInitializerListContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitVariableInitializerList(this);
	}
};

VariableInitializerListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitVariableInitializerList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.VariableInitializerListContext = VariableInitializerListContext;

GrammarParser.prototype.variableInitializerList = function() {

    var localctx = new VariableInitializerListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, GrammarParser.RULE_variableInitializerList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 531;
        this.variableInitializer();
        this.state = 536;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 532;
                this.match(GrammarParser.COMMA);
                this.state = 533;
                this.variableInitializer(); 
            }
            this.state = 538;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.LBRACE = function() {
    return this.getToken(GrammarParser.LBRACE, 0);
};

BlockContext.prototype.RBRACE = function() {
    return this.getToken(GrammarParser.RBRACE, 0);
};

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitBlock(this);
	}
};

BlockContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitBlock(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.BlockContext = BlockContext;

GrammarParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, GrammarParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 539;
        this.match(GrammarParser.LBRACE);
        this.state = 543;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << GrammarParser.BOOLEAN) | (1 << GrammarParser.BREAK) | (1 << GrammarParser.BYTE) | (1 << GrammarParser.CHAR) | (1 << GrammarParser.CONTINUE) | (1 << GrammarParser.DOUBLE) | (1 << GrammarParser.FINAL) | (1 << GrammarParser.FLOAT) | (1 << GrammarParser.FOR) | (1 << GrammarParser.IF) | (1 << GrammarParser.INT) | (1 << GrammarParser.LONG))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.NEW - 32)) | (1 << (GrammarParser.NULL - 32)) | (1 << (GrammarParser.RETURN - 32)) | (1 << (GrammarParser.SHORT - 32)) | (1 << (GrammarParser.WHILE - 32)) | (1 << (GrammarParser.TYPE - 32)) | (1 << (GrammarParser.INTEGER_VALUE - 32)) | (1 << (GrammarParser.DOUBLE_VALUE - 32)) | (1 << (GrammarParser.BOOLEAN_VALUE - 32)) | (1 << (GrammarParser.STRING_VALUE - 32)) | (1 << (GrammarParser.CLASS_IDENTIFIER - 32)) | (1 << (GrammarParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GrammarParser.LPAREN - 65)) | (1 << (GrammarParser.INC - 65)) | (1 << (GrammarParser.DEC - 65)))) !== 0)) {
            this.state = 540;
            this.statement();
            this.state = 545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 546;
        this.match(GrammarParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.variableDeclaratorList = function() {
    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
};

LocalVariableDeclarationContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

LocalVariableDeclarationContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

LocalVariableDeclarationContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

LocalVariableDeclarationContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitLocalVariableDeclaration(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

GrammarParser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, GrammarParser.RULE_localVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===GrammarParser.FINAL) {
            this.state = 548;
            this.variableModifier();
            this.state = 553;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 556;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        switch(la_) {
        case 1:
            this.state = 554;
            this.primitiveType();
            break;

        case 2:
            this.state = 555;
            this.referenceType();
            break;

        }
        this.state = 558;
        this.variableDeclaratorList();
        this.state = 559;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.statementWithoutTrailingSubstatement = function() {
    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
};

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

StatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

StatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

StatementContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitStatement(this);
	}
};

StatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.StatementContext = StatementContext;

GrammarParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, GrammarParser.RULE_statement);
    try {
        this.state = 567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 561;
            this.statementWithoutTrailingSubstatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 562;
            this.ifStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 563;
            this.whileStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 564;
            this.forStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 565;
            this.localVariableDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 566;
            this.assignment();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementWithoutTrailingSubstatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_statementWithoutTrailingSubstatement;
    return this;
}

StatementWithoutTrailingSubstatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementWithoutTrailingSubstatementContext.prototype.constructor = StatementWithoutTrailingSubstatementContext;

StatementWithoutTrailingSubstatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementWithoutTrailingSubstatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterStatementWithoutTrailingSubstatement(this);
	}
};

StatementWithoutTrailingSubstatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitStatementWithoutTrailingSubstatement(this);
	}
};

StatementWithoutTrailingSubstatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitStatementWithoutTrailingSubstatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext;

GrammarParser.prototype.statementWithoutTrailingSubstatement = function() {

    var localctx = new StatementWithoutTrailingSubstatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, GrammarParser.RULE_statementWithoutTrailingSubstatement);
    try {
        this.state = 573;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.NEW:
        case GrammarParser.NULL:
        case GrammarParser.SHORT:
        case GrammarParser.TYPE:
        case GrammarParser.INTEGER_VALUE:
        case GrammarParser.DOUBLE_VALUE:
        case GrammarParser.BOOLEAN_VALUE:
        case GrammarParser.STRING_VALUE:
        case GrammarParser.CLASS_IDENTIFIER:
        case GrammarParser.IDENTIFIER:
        case GrammarParser.LPAREN:
        case GrammarParser.INC:
        case GrammarParser.DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 569;
            this.expressionStatement();
            break;
        case GrammarParser.BREAK:
            this.enterOuterAlt(localctx, 2);
            this.state = 570;
            this.breakStatement();
            break;
        case GrammarParser.CONTINUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 571;
            this.continueStatement();
            break;
        case GrammarParser.RETURN:
            this.enterOuterAlt(localctx, 4);
            this.state = 572;
            this.returnStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.statementExpression = function() {
    return this.getTypedRuleContext(StatementExpressionContext,0);
};

ExpressionStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitExpressionStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExpressionStatementContext = ExpressionStatementContext;

GrammarParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, GrammarParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 575;
        this.statementExpression();
        this.state = 576;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_statementExpression;
    return this;
}

StatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionContext.prototype.constructor = StatementExpressionContext;

StatementExpressionContext.prototype.assignment = function() {
    return this.getTypedRuleContext(AssignmentContext,0);
};

StatementExpressionContext.prototype.methodInvocation = function() {
    return this.getTypedRuleContext(MethodInvocationContext,0);
};

StatementExpressionContext.prototype.classInstanceCreationExpression = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
};

StatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterStatementExpression(this);
	}
};

StatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitStatementExpression(this);
	}
};

StatementExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitStatementExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.StatementExpressionContext = StatementExpressionContext;

GrammarParser.prototype.statementExpression = function() {

    var localctx = new StatementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, GrammarParser.RULE_statementExpression);
    try {
        this.state = 581;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 578;
            this.assignment();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 579;
            this.methodInvocation();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 580;
            this.classInstanceCreationExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.IF = function() {
    return this.getToken(GrammarParser.IF, 0);
};

IfStatementContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

IfStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatementContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

IfStatementContext.prototype.block = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockContext);
    } else {
        return this.getTypedRuleContext(BlockContext,i);
    }
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.ELSE = function() {
    return this.getToken(GrammarParser.ELSE, 0);
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitIfStatement(this);
	}
};

IfStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitIfStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.IfStatementContext = IfStatementContext;

GrammarParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, GrammarParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this.match(GrammarParser.IF);
        this.state = 584;
        this.match(GrammarParser.LPAREN);
        this.state = 585;
        this.expression();
        this.state = 586;
        this.match(GrammarParser.RPAREN);
        this.state = 597;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.LBRACE:
            this.state = 587;
            this.block();
            this.state = 590;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
            if(la_===1) {
                this.state = 588;
                this.match(GrammarParser.ELSE);
                this.state = 589;
                this.block();

            }
            break;
        case GrammarParser.BOOLEAN:
        case GrammarParser.BREAK:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.CONTINUE:
        case GrammarParser.DOUBLE:
        case GrammarParser.FINAL:
        case GrammarParser.FLOAT:
        case GrammarParser.FOR:
        case GrammarParser.IF:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.NEW:
        case GrammarParser.NULL:
        case GrammarParser.RETURN:
        case GrammarParser.SHORT:
        case GrammarParser.WHILE:
        case GrammarParser.TYPE:
        case GrammarParser.INTEGER_VALUE:
        case GrammarParser.DOUBLE_VALUE:
        case GrammarParser.BOOLEAN_VALUE:
        case GrammarParser.STRING_VALUE:
        case GrammarParser.CLASS_IDENTIFIER:
        case GrammarParser.IDENTIFIER:
        case GrammarParser.LPAREN:
        case GrammarParser.INC:
        case GrammarParser.DEC:
            this.state = 592;
            this.statement();
            this.state = 595;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
            if(la_===1) {
                this.state = 593;
                this.match(GrammarParser.ELSE);
                this.state = 594;
                this.statement();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.WHILE = function() {
    return this.getToken(GrammarParser.WHILE, 0);
};

WhileStatementContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

WhileStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitWhileStatement(this);
	}
};

WhileStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitWhileStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.WhileStatementContext = WhileStatementContext;

GrammarParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, GrammarParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 599;
        this.match(GrammarParser.WHILE);
        this.state = 600;
        this.match(GrammarParser.LPAREN);
        this.state = 601;
        this.expression();
        this.state = 602;
        this.match(GrammarParser.RPAREN);
        this.state = 606;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.LBRACE:
            this.state = 603;
            this.block();
            break;
        case GrammarParser.BOOLEAN:
        case GrammarParser.BREAK:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.CONTINUE:
        case GrammarParser.DOUBLE:
        case GrammarParser.FINAL:
        case GrammarParser.FLOAT:
        case GrammarParser.FOR:
        case GrammarParser.IF:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.NEW:
        case GrammarParser.NULL:
        case GrammarParser.RETURN:
        case GrammarParser.SHORT:
        case GrammarParser.WHILE:
        case GrammarParser.TYPE:
        case GrammarParser.INTEGER_VALUE:
        case GrammarParser.DOUBLE_VALUE:
        case GrammarParser.BOOLEAN_VALUE:
        case GrammarParser.STRING_VALUE:
        case GrammarParser.CLASS_IDENTIFIER:
        case GrammarParser.IDENTIFIER:
        case GrammarParser.LPAREN:
        case GrammarParser.INC:
        case GrammarParser.DEC:
            this.state = 604;
            this.statement();
            break;
        case GrammarParser.SEMICOLON:
            this.state = 605;
            this.match(GrammarParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.FOR = function() {
    return this.getToken(GrammarParser.FOR, 0);
};

ForStatementContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ForStatementContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.SEMICOLON);
    } else {
        return this.getToken(GrammarParser.SEMICOLON, i);
    }
};


ForStatementContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ForStatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ForStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForStatementContext.prototype.incOrDecExpression = function() {
    return this.getTypedRuleContext(IncOrDecExpressionContext,0);
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitForStatement(this);
	}
};

ForStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitForStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ForStatementContext = ForStatementContext;

GrammarParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, GrammarParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608;
        this.match(GrammarParser.FOR);
        this.state = 609;
        this.match(GrammarParser.LPAREN);
        this.state = 612;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.BOOLEAN:
        case GrammarParser.BYTE:
        case GrammarParser.CHAR:
        case GrammarParser.DOUBLE:
        case GrammarParser.FINAL:
        case GrammarParser.FLOAT:
        case GrammarParser.INT:
        case GrammarParser.LONG:
        case GrammarParser.SHORT:
        case GrammarParser.TYPE:
        case GrammarParser.CLASS_IDENTIFIER:
            this.state = 610;
            this.localVariableDeclaration();
            break;
        case GrammarParser.SEMICOLON:
            this.state = 611;
            this.match(GrammarParser.SEMICOLON);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 615;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.NEW - 32)) | (1 << (GrammarParser.NULL - 32)) | (1 << (GrammarParser.INTEGER_VALUE - 32)) | (1 << (GrammarParser.DOUBLE_VALUE - 32)) | (1 << (GrammarParser.BOOLEAN_VALUE - 32)) | (1 << (GrammarParser.STRING_VALUE - 32)) | (1 << (GrammarParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GrammarParser.LPAREN - 65)) | (1 << (GrammarParser.PLUS - 65)) | (1 << (GrammarParser.MINUS - 65)) | (1 << (GrammarParser.INC - 65)) | (1 << (GrammarParser.DEC - 65)) | (1 << (GrammarParser.NOT - 65)))) !== 0)) {
            this.state = 614;
            this.expression();
        }

        this.state = 617;
        this.match(GrammarParser.SEMICOLON);
        this.state = 619;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (GrammarParser.NULL - 33)) | (1 << (GrammarParser.INTEGER_VALUE - 33)) | (1 << (GrammarParser.DOUBLE_VALUE - 33)) | (1 << (GrammarParser.BOOLEAN_VALUE - 33)) | (1 << (GrammarParser.STRING_VALUE - 33)) | (1 << (GrammarParser.IDENTIFIER - 33)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GrammarParser.LPAREN - 65)) | (1 << (GrammarParser.INC - 65)) | (1 << (GrammarParser.DEC - 65)))) !== 0)) {
            this.state = 618;
            this.incOrDecExpression();
        }

        this.state = 621;
        this.match(GrammarParser.RPAREN);
        this.state = 622;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;

BreakStatementContext.prototype.BREAK = function() {
    return this.getToken(GrammarParser.BREAK, 0);
};

BreakStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitBreakStatement(this);
	}
};

BreakStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitBreakStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.BreakStatementContext = BreakStatementContext;

GrammarParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, GrammarParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 624;
        this.match(GrammarParser.BREAK);
        this.state = 625;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;

ContinueStatementContext.prototype.CONTINUE = function() {
    return this.getToken(GrammarParser.CONTINUE, 0);
};

ContinueStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitContinueStatement(this);
	}
};

ContinueStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitContinueStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ContinueStatementContext = ContinueStatementContext;

GrammarParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, GrammarParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 627;
        this.match(GrammarParser.CONTINUE);
        this.state = 628;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.RETURN = function() {
    return this.getToken(GrammarParser.RETURN, 0);
};

ReturnStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(GrammarParser.SEMICOLON, 0);
};

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitReturnStatement(this);
	}
};

ReturnStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitReturnStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ReturnStatementContext = ReturnStatementContext;

GrammarParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, GrammarParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        this.match(GrammarParser.RETURN);
        this.state = 632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.NEW - 32)) | (1 << (GrammarParser.NULL - 32)) | (1 << (GrammarParser.INTEGER_VALUE - 32)) | (1 << (GrammarParser.DOUBLE_VALUE - 32)) | (1 << (GrammarParser.BOOLEAN_VALUE - 32)) | (1 << (GrammarParser.STRING_VALUE - 32)) | (1 << (GrammarParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GrammarParser.LPAREN - 65)) | (1 << (GrammarParser.PLUS - 65)) | (1 << (GrammarParser.MINUS - 65)) | (1 << (GrammarParser.INC - 65)) | (1 << (GrammarParser.DEC - 65)) | (1 << (GrammarParser.NOT - 65)))) !== 0)) {
            this.state = 631;
            this.expression();
        }

        this.state = 634;
        this.match(GrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primitive = function() {
    return this.getTypedRuleContext(PrimitiveContext,0);
};

ExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ExpressionContext.prototype.classInstanceCreationExpression = function() {
    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitExpression(this);
	}
};

ExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ExpressionContext = ExpressionContext;

GrammarParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, GrammarParser.RULE_expression);
    try {
        this.state = 639;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 636;
            this.primitive();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 637;
            this.conditionalExpression(0);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 638;
            this.classInstanceCreationExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

AssignmentContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

AssignmentContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AssignmentContext.prototype.TYPE = function() {
    return this.getToken(GrammarParser.TYPE, 0);
};

AssignmentContext.prototype.primitiveType = function() {
    return this.getTypedRuleContext(PrimitiveTypeContext,0);
};

AssignmentContext.prototype.referenceType = function() {
    return this.getTypedRuleContext(ReferenceTypeContext,0);
};

AssignmentContext.prototype.incOrDecExpression = function() {
    return this.getTypedRuleContext(IncOrDecExpressionContext,0);
};

AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitAssignment(this);
	}
};

AssignmentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitAssignment(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.AssignmentContext = AssignmentContext;

GrammarParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, GrammarParser.RULE_assignment);
    try {
        this.state = 651;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 644;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
            if(la_===1) {
                this.state = 641;
                this.match(GrammarParser.TYPE);

            } else if(la_===2) {
                this.state = 642;
                this.primitiveType();

            } else if(la_===3) {
                this.state = 643;
                this.referenceType();

            }
            this.state = 646;
            this.match(GrammarParser.IDENTIFIER);
            this.state = 647;
            this.assignmentOperator();
            this.state = 648;
            this.expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 650;
            this.incOrDecExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;

AssignmentOperatorContext.prototype.ASSIGN = function() {
    return this.getToken(GrammarParser.ASSIGN, 0);
};

AssignmentOperatorContext.prototype.MUL = function() {
    return this.getToken(GrammarParser.MUL, 0);
};

AssignmentOperatorContext.prototype.DIV = function() {
    return this.getToken(GrammarParser.DIV, 0);
};

AssignmentOperatorContext.prototype.MOD = function() {
    return this.getToken(GrammarParser.MOD, 0);
};

AssignmentOperatorContext.prototype.PLUS = function() {
    return this.getToken(GrammarParser.PLUS, 0);
};

AssignmentOperatorContext.prototype.MINUS = function() {
    return this.getToken(GrammarParser.MINUS, 0);
};

AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitAssignmentOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.AssignmentOperatorContext = AssignmentOperatorContext;

GrammarParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, GrammarParser.RULE_assignmentOperator);
    try {
        this.state = 664;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.ASSIGN:
            this.enterOuterAlt(localctx, 1);
            this.state = 653;
            this.match(GrammarParser.ASSIGN);
            break;
        case GrammarParser.MUL:
            this.enterOuterAlt(localctx, 2);
            this.state = 654;
            this.match(GrammarParser.MUL);
            this.state = 655;
            this.match(GrammarParser.ASSIGN);
            break;
        case GrammarParser.DIV:
            this.enterOuterAlt(localctx, 3);
            this.state = 656;
            this.match(GrammarParser.DIV);
            this.state = 657;
            this.match(GrammarParser.ASSIGN);
            break;
        case GrammarParser.MOD:
            this.enterOuterAlt(localctx, 4);
            this.state = 658;
            this.match(GrammarParser.MOD);
            this.state = 659;
            this.match(GrammarParser.ASSIGN);
            break;
        case GrammarParser.PLUS:
            this.enterOuterAlt(localctx, 5);
            this.state = 660;
            this.match(GrammarParser.PLUS);
            this.state = 661;
            this.match(GrammarParser.ASSIGN);
            break;
        case GrammarParser.MINUS:
            this.enterOuterAlt(localctx, 6);
            this.state = 662;
            this.match(GrammarParser.MINUS);
            this.state = 663;
            this.match(GrammarParser.ASSIGN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConditionalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_conditionalExpression;
    return this;
}

ConditionalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.conditionalOrExpression = function() {
    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
};

ConditionalExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ConditionalExpressionContext.prototype.Q_MARK = function() {
    return this.getToken(GrammarParser.Q_MARK, 0);
};

ConditionalExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalExpressionContext.prototype.COMMA = function() {
    return this.getToken(GrammarParser.COMMA, 0);
};

ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitConditionalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



GrammarParser.prototype.conditionalExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConditionalExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 140;
    this.enterRecursionRule(localctx, 140, GrammarParser.RULE_conditionalExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 667;
        this.conditionalOrExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 677;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ConditionalExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_conditionalExpression);
                this.state = 669;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 670;
                this.match(GrammarParser.Q_MARK);
                this.state = 671;
                this.expression();
                this.state = 672;
                this.match(GrammarParser.COMMA);
                this.state = 673;
                this.conditionalOrExpression(0); 
            }
            this.state = 679;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ConditionalOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_conditionalOrExpression;
    return this;
}

ConditionalOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalOrExpressionContext.prototype.constructor = ConditionalOrExpressionContext;

ConditionalOrExpressionContext.prototype.conditionalAndExpression = function() {
    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
};

ConditionalOrExpressionContext.prototype.conditionalOrExpression = function() {
    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
};

ConditionalOrExpressionContext.prototype.OR = function() {
    return this.getToken(GrammarParser.OR, 0);
};

ConditionalOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConditionalOrExpression(this);
	}
};

ConditionalOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConditionalOrExpression(this);
	}
};

ConditionalOrExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitConditionalOrExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



GrammarParser.prototype.conditionalOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConditionalOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 142;
    this.enterRecursionRule(localctx, 142, GrammarParser.RULE_conditionalOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.conditionalAndExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 688;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ConditionalOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_conditionalOrExpression);
                this.state = 683;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 684;
                this.match(GrammarParser.OR);
                this.state = 685;
                this.conditionalAndExpression(0); 
            }
            this.state = 690;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ConditionalAndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_conditionalAndExpression;
    return this;
}

ConditionalAndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalAndExpressionContext.prototype.constructor = ConditionalAndExpressionContext;

ConditionalAndExpressionContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

ConditionalAndExpressionContext.prototype.conditionalAndExpression = function() {
    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
};

ConditionalAndExpressionContext.prototype.AND = function() {
    return this.getToken(GrammarParser.AND, 0);
};

ConditionalAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterConditionalAndExpression(this);
	}
};

ConditionalAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitConditionalAndExpression(this);
	}
};

ConditionalAndExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitConditionalAndExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



GrammarParser.prototype.conditionalAndExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ConditionalAndExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 144;
    this.enterRecursionRule(localctx, 144, GrammarParser.RULE_conditionalAndExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 692;
        this.relationalExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 699;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ConditionalAndExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_conditionalAndExpression);
                this.state = 694;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 695;
                this.match(GrammarParser.AND);
                this.state = 696;
                this.relationalExpression(0); 
            }
            this.state = 701;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function RelationalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_relationalExpression;
    return this;
}

RelationalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

RelationalExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

RelationalExpressionContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

RelationalExpressionContext.prototype.LT = function() {
    return this.getToken(GrammarParser.LT, 0);
};

RelationalExpressionContext.prototype.GT = function() {
    return this.getToken(GrammarParser.GT, 0);
};

RelationalExpressionContext.prototype.LE = function() {
    return this.getToken(GrammarParser.LE, 0);
};

RelationalExpressionContext.prototype.GE = function() {
    return this.getToken(GrammarParser.GE, 0);
};

RelationalExpressionContext.prototype.EQ = function() {
    return this.getToken(GrammarParser.EQ, 0);
};

RelationalExpressionContext.prototype.NOT_EQ = function() {
    return this.getToken(GrammarParser.NOT_EQ, 0);
};

RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitRelationalExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



GrammarParser.prototype.relationalExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationalExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 146;
    this.enterRecursionRule(localctx, 146, GrammarParser.RULE_relationalExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.additiveExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 710;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,79,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_relationalExpression);
                this.state = 705;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 706;
                _la = this._input.LA(1);
                if(!(((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (GrammarParser.LT - 86)) | (1 << (GrammarParser.GT - 86)) | (1 << (GrammarParser.LE - 86)) | (1 << (GrammarParser.GE - 86)) | (1 << (GrammarParser.EQ - 86)) | (1 << (GrammarParser.NOT_EQ - 86)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 707;
                this.additiveExpression(0); 
            }
            this.state = 712;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,79,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AdditiveExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_additiveExpression;
    return this;
}

AdditiveExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.multiplicativeExpression = function() {
    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
};

AdditiveExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

AdditiveExpressionContext.prototype.PLUS = function() {
    return this.getToken(GrammarParser.PLUS, 0);
};

AdditiveExpressionContext.prototype.MINUS = function() {
    return this.getToken(GrammarParser.MINUS, 0);
};

AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitAdditiveExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



GrammarParser.prototype.additiveExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AdditiveExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 148;
    this.enterRecursionRule(localctx, 148, GrammarParser.RULE_additiveExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 714;
        this.multiplicativeExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 721;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_additiveExpression);
                this.state = 716;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 717;
                _la = this._input.LA(1);
                if(!(_la===GrammarParser.PLUS || _la===GrammarParser.MINUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 718;
                this.multiplicativeExpression(0); 
            }
            this.state = 723;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function MultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_multiplicativeExpression;
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

MultiplicativeExpressionContext.prototype.multiplicativeExpression = function() {
    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
};

MultiplicativeExpressionContext.prototype.MUL = function() {
    return this.getToken(GrammarParser.MUL, 0);
};

MultiplicativeExpressionContext.prototype.DIV = function() {
    return this.getToken(GrammarParser.DIV, 0);
};

MultiplicativeExpressionContext.prototype.MOD = function() {
    return this.getToken(GrammarParser.MOD, 0);
};

MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMultiplicativeExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



GrammarParser.prototype.multiplicativeExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MultiplicativeExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 150;
    this.enterRecursionRule(localctx, 150, GrammarParser.RULE_multiplicativeExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 725;
        this.unaryExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 732;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,81,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, GrammarParser.RULE_multiplicativeExpression);
                this.state = 727;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 728;
                _la = this._input.LA(1);
                if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (GrammarParser.DIV - 77)) | (1 << (GrammarParser.MUL - 77)) | (1 << (GrammarParser.MOD - 77)))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 729;
                this.unaryExpression(); 
            }
            this.state = 734;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,81,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.incOrDecExpression = function() {
    return this.getTypedRuleContext(IncOrDecExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryExpressionContext.prototype.PLUS = function() {
    return this.getToken(GrammarParser.PLUS, 0);
};

UnaryExpressionContext.prototype.MINUS = function() {
    return this.getToken(GrammarParser.MINUS, 0);
};

UnaryExpressionContext.prototype.NOT = function() {
    return this.getToken(GrammarParser.NOT, 0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitUnaryExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.UnaryExpressionContext = UnaryExpressionContext;

GrammarParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, GrammarParser.RULE_unaryExpression);
    var _la = 0; // Token type
    try {
        this.state = 738;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.NULL:
        case GrammarParser.INTEGER_VALUE:
        case GrammarParser.DOUBLE_VALUE:
        case GrammarParser.BOOLEAN_VALUE:
        case GrammarParser.STRING_VALUE:
        case GrammarParser.IDENTIFIER:
        case GrammarParser.LPAREN:
        case GrammarParser.INC:
        case GrammarParser.DEC:
            this.enterOuterAlt(localctx, 1);
            this.state = 735;
            this.incOrDecExpression();
            break;
        case GrammarParser.PLUS:
        case GrammarParser.MINUS:
        case GrammarParser.NOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 736;
            _la = this._input.LA(1);
            if(!(((((_la - 75)) & ~0x1f) == 0 && ((1 << (_la - 75)) & ((1 << (GrammarParser.PLUS - 75)) | (1 << (GrammarParser.MINUS - 75)) | (1 << (GrammarParser.NOT - 75)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 737;
            this.unaryExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IncOrDecExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_incOrDecExpression;
    return this;
}

IncOrDecExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncOrDecExpressionContext.prototype.constructor = IncOrDecExpressionContext;

IncOrDecExpressionContext.prototype.primitive = function() {
    return this.getTypedRuleContext(PrimitiveContext,0);
};

IncOrDecExpressionContext.prototype.IDENTIFIER = function() {
    return this.getToken(GrammarParser.IDENTIFIER, 0);
};

IncOrDecExpressionContext.prototype.INC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.INC);
    } else {
        return this.getToken(GrammarParser.INC, i);
    }
};


IncOrDecExpressionContext.prototype.DEC = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(GrammarParser.DEC);
    } else {
        return this.getToken(GrammarParser.DEC, i);
    }
};


IncOrDecExpressionContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

IncOrDecExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IncOrDecExpressionContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

IncOrDecExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterIncOrDecExpression(this);
	}
};

IncOrDecExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitIncOrDecExpression(this);
	}
};

IncOrDecExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitIncOrDecExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.IncOrDecExpressionContext = IncOrDecExpressionContext;

GrammarParser.prototype.incOrDecExpression = function() {

    var localctx = new IncOrDecExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, GrammarParser.RULE_incOrDecExpression);
    var _la = 0; // Token type
    try {
        this.state = 752;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case GrammarParser.NULL:
        case GrammarParser.INTEGER_VALUE:
        case GrammarParser.DOUBLE_VALUE:
        case GrammarParser.BOOLEAN_VALUE:
        case GrammarParser.STRING_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 740;
            this.primitive();
            break;
        case GrammarParser.IDENTIFIER:
        case GrammarParser.INC:
        case GrammarParser.DEC:
            this.enterOuterAlt(localctx, 2);
            this.state = 742;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===GrammarParser.INC || _la===GrammarParser.DEC) {
                this.state = 741;
                _la = this._input.LA(1);
                if(!(_la===GrammarParser.INC || _la===GrammarParser.DEC)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 744;
            this.match(GrammarParser.IDENTIFIER);
            this.state = 746;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 745;
                _la = this._input.LA(1);
                if(!(_la===GrammarParser.INC || _la===GrammarParser.DEC)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;
        case GrammarParser.LPAREN:
            this.enterOuterAlt(localctx, 3);
            this.state = 748;
            this.match(GrammarParser.LPAREN);
            this.state = 749;
            this.expression();
            this.state = 750;
            this.match(GrammarParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MethodInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_methodInvocation;
    return this;
}

MethodInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodInvocationContext.prototype.constructor = MethodInvocationContext;

MethodInvocationContext.prototype.methodName = function() {
    return this.getTypedRuleContext(MethodNameContext,0);
};

MethodInvocationContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

MethodInvocationContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

MethodInvocationContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

MethodInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterMethodInvocation(this);
	}
};

MethodInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitMethodInvocation(this);
	}
};

MethodInvocationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitMethodInvocation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.MethodInvocationContext = MethodInvocationContext;

GrammarParser.prototype.methodInvocation = function() {

    var localctx = new MethodInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, GrammarParser.RULE_methodInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 754;
        this.methodName();
        this.state = 755;
        this.match(GrammarParser.LPAREN);
        this.state = 757;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.NEW - 32)) | (1 << (GrammarParser.NULL - 32)) | (1 << (GrammarParser.INTEGER_VALUE - 32)) | (1 << (GrammarParser.DOUBLE_VALUE - 32)) | (1 << (GrammarParser.BOOLEAN_VALUE - 32)) | (1 << (GrammarParser.STRING_VALUE - 32)) | (1 << (GrammarParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GrammarParser.LPAREN - 65)) | (1 << (GrammarParser.PLUS - 65)) | (1 << (GrammarParser.MINUS - 65)) | (1 << (GrammarParser.INC - 65)) | (1 << (GrammarParser.DEC - 65)) | (1 << (GrammarParser.NOT - 65)))) !== 0)) {
            this.state = 756;
            this.argumentList();
        }

        this.state = 759;
        this.match(GrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClassInstanceCreationExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = GrammarParser.RULE_classInstanceCreationExpression;
    return this;
}

ClassInstanceCreationExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassInstanceCreationExpressionContext.prototype.constructor = ClassInstanceCreationExpressionContext;

ClassInstanceCreationExpressionContext.prototype.NEW = function() {
    return this.getToken(GrammarParser.NEW, 0);
};

ClassInstanceCreationExpressionContext.prototype.string_dot_splitted = function() {
    return this.getTypedRuleContext(String_dot_splittedContext,0);
};

ClassInstanceCreationExpressionContext.prototype.LPAREN = function() {
    return this.getToken(GrammarParser.LPAREN, 0);
};

ClassInstanceCreationExpressionContext.prototype.RPAREN = function() {
    return this.getToken(GrammarParser.RPAREN, 0);
};

ClassInstanceCreationExpressionContext.prototype.argumentsType = function() {
    return this.getTypedRuleContext(ArgumentsTypeContext,0);
};

ClassInstanceCreationExpressionContext.prototype.typeArgumentsOrEmpty = function() {
    return this.getTypedRuleContext(TypeArgumentsOrEmptyContext,0);
};

ClassInstanceCreationExpressionContext.prototype.argumentList = function() {
    return this.getTypedRuleContext(ArgumentListContext,0);
};

ClassInstanceCreationExpressionContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassInstanceCreationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.enterClassInstanceCreationExpression(this);
	}
};

ClassInstanceCreationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof GrammarListener ) {
        listener.exitClassInstanceCreationExpression(this);
	}
};

ClassInstanceCreationExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof GrammarVisitor ) {
        return visitor.visitClassInstanceCreationExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};




GrammarParser.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext;

GrammarParser.prototype.classInstanceCreationExpression = function() {

    var localctx = new ClassInstanceCreationExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, GrammarParser.RULE_classInstanceCreationExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 761;
        this.match(GrammarParser.NEW);
        this.state = 763;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LT) {
            this.state = 762;
            this.argumentsType();
        }

        this.state = 765;
        this.string_dot_splitted(0);
        this.state = 767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LT) {
            this.state = 766;
            this.typeArgumentsOrEmpty();
        }

        this.state = 769;
        this.match(GrammarParser.LPAREN);
        this.state = 771;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (GrammarParser.NEW - 32)) | (1 << (GrammarParser.NULL - 32)) | (1 << (GrammarParser.INTEGER_VALUE - 32)) | (1 << (GrammarParser.DOUBLE_VALUE - 32)) | (1 << (GrammarParser.BOOLEAN_VALUE - 32)) | (1 << (GrammarParser.STRING_VALUE - 32)) | (1 << (GrammarParser.IDENTIFIER - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (GrammarParser.LPAREN - 65)) | (1 << (GrammarParser.PLUS - 65)) | (1 << (GrammarParser.MINUS - 65)) | (1 << (GrammarParser.INC - 65)) | (1 << (GrammarParser.DEC - 65)) | (1 << (GrammarParser.NOT - 65)))) !== 0)) {
            this.state = 770;
            this.argumentList();
        }

        this.state = 773;
        this.match(GrammarParser.RPAREN);
        this.state = 775;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===GrammarParser.LBRACE) {
            this.state = 774;
            this.classBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


GrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 15:
			return this.string_dot_splitted_sempred(localctx, predIndex);
	case 70:
			return this.conditionalExpression_sempred(localctx, predIndex);
	case 71:
			return this.conditionalOrExpression_sempred(localctx, predIndex);
	case 72:
			return this.conditionalAndExpression_sempred(localctx, predIndex);
	case 73:
			return this.relationalExpression_sempred(localctx, predIndex);
	case 74:
			return this.additiveExpression_sempred(localctx, predIndex);
	case 75:
			return this.multiplicativeExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

GrammarParser.prototype.string_dot_splitted_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GrammarParser.prototype.conditionalExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GrammarParser.prototype.conditionalOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GrammarParser.prototype.conditionalAndExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 3:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GrammarParser.prototype.relationalExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 4:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GrammarParser.prototype.additiveExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

GrammarParser.prototype.multiplicativeExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.GrammarParser = GrammarParser;
exports.CompilationUnitContext = CompilationUnitContext;
GrammarParser.CompilationUnitContext = CompilationUnitContext;
exports.PrimitiveContext = PrimitiveContext;
GrammarParser.PrimitiveContext = PrimitiveContext;
exports.PrimitiveTypeContext = PrimitiveTypeContext;
GrammarParser.PrimitiveTypeContext = PrimitiveTypeContext;
exports.ReferenceTypeContext = ReferenceTypeContext;
GrammarParser.ReferenceTypeContext = ReferenceTypeContext;
exports.ClassTypeContext = ClassTypeContext;
GrammarParser.ClassTypeContext = ClassTypeContext;
exports.VariableTypeContext = VariableTypeContext;
GrammarParser.VariableTypeContext = VariableTypeContext;
exports.ArrayTypeContext = ArrayTypeContext;
GrammarParser.ArrayTypeContext = ArrayTypeContext;
exports.Brackets_squareContext = Brackets_squareContext;
GrammarParser.Brackets_squareContext = Brackets_squareContext;
exports.TypeParameterContext = TypeParameterContext;
GrammarParser.TypeParameterContext = TypeParameterContext;
exports.TypeBoundContext = TypeBoundContext;
GrammarParser.TypeBoundContext = TypeBoundContext;
exports.ArgumentsTypeContext = ArgumentsTypeContext;
GrammarParser.ArgumentsTypeContext = ArgumentsTypeContext;
exports.TypeArgumentListContext = TypeArgumentListContext;
GrammarParser.TypeArgumentListContext = TypeArgumentListContext;
exports.TypeArgumentContext = TypeArgumentContext;
GrammarParser.TypeArgumentContext = TypeArgumentContext;
exports.WildcardContext = WildcardContext;
GrammarParser.WildcardContext = WildcardContext;
exports.WildcardBoundsContext = WildcardBoundsContext;
GrammarParser.WildcardBoundsContext = WildcardBoundsContext;
exports.String_dot_splittedContext = String_dot_splittedContext;
GrammarParser.String_dot_splittedContext = String_dot_splittedContext;
exports.ArgumentListContext = ArgumentListContext;
GrammarParser.ArgumentListContext = ArgumentListContext;
exports.MethodNameContext = MethodNameContext;
GrammarParser.MethodNameContext = MethodNameContext;
exports.PackageDeclarationContext = PackageDeclarationContext;
GrammarParser.PackageDeclarationContext = PackageDeclarationContext;
exports.ImportDeclarationContext = ImportDeclarationContext;
GrammarParser.ImportDeclarationContext = ImportDeclarationContext;
exports.ClassDeclarationContext = ClassDeclarationContext;
GrammarParser.ClassDeclarationContext = ClassDeclarationContext;
exports.ClassModifierContext = ClassModifierContext;
GrammarParser.ClassModifierContext = ClassModifierContext;
exports.TypeParametersContext = TypeParametersContext;
GrammarParser.TypeParametersContext = TypeParametersContext;
exports.TypeArgumentsOrEmptyContext = TypeArgumentsOrEmptyContext;
GrammarParser.TypeArgumentsOrEmptyContext = TypeArgumentsOrEmptyContext;
exports.TypeParameterListContext = TypeParameterListContext;
GrammarParser.TypeParameterListContext = TypeParameterListContext;
exports.SuperclassContext = SuperclassContext;
GrammarParser.SuperclassContext = SuperclassContext;
exports.SuperinterfacesContext = SuperinterfacesContext;
GrammarParser.SuperinterfacesContext = SuperinterfacesContext;
exports.ClassTypeListContext = ClassTypeListContext;
GrammarParser.ClassTypeListContext = ClassTypeListContext;
exports.ClassBodyContext = ClassBodyContext;
GrammarParser.ClassBodyContext = ClassBodyContext;
exports.ClassMemberDeclarationContext = ClassMemberDeclarationContext;
GrammarParser.ClassMemberDeclarationContext = ClassMemberDeclarationContext;
exports.FieldDeclarationContext = FieldDeclarationContext;
GrammarParser.FieldDeclarationContext = FieldDeclarationContext;
exports.FieldModifierContext = FieldModifierContext;
GrammarParser.FieldModifierContext = FieldModifierContext;
exports.VariableDeclaratorListContext = VariableDeclaratorListContext;
GrammarParser.VariableDeclaratorListContext = VariableDeclaratorListContext;
exports.VariableDeclaratorContext = VariableDeclaratorContext;
GrammarParser.VariableDeclaratorContext = VariableDeclaratorContext;
exports.VariableDeclaratorIdContext = VariableDeclaratorIdContext;
GrammarParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;
exports.VariableInitializerContext = VariableInitializerContext;
GrammarParser.VariableInitializerContext = VariableInitializerContext;
exports.MethodDeclarationContext = MethodDeclarationContext;
GrammarParser.MethodDeclarationContext = MethodDeclarationContext;
exports.MethodModifierContext = MethodModifierContext;
GrammarParser.MethodModifierContext = MethodModifierContext;
exports.MethodHeaderContext = MethodHeaderContext;
GrammarParser.MethodHeaderContext = MethodHeaderContext;
exports.ResultContext = ResultContext;
GrammarParser.ResultContext = ResultContext;
exports.MethodDeclaratorContext = MethodDeclaratorContext;
GrammarParser.MethodDeclaratorContext = MethodDeclaratorContext;
exports.FormalParameterListContext = FormalParameterListContext;
GrammarParser.FormalParameterListContext = FormalParameterListContext;
exports.FormalParameterContext = FormalParameterContext;
GrammarParser.FormalParameterContext = FormalParameterContext;
exports.VariableModifierContext = VariableModifierContext;
GrammarParser.VariableModifierContext = VariableModifierContext;
exports.Throws_Context = Throws_Context;
GrammarParser.Throws_Context = Throws_Context;
exports.ExceptionTypeListContext = ExceptionTypeListContext;
GrammarParser.ExceptionTypeListContext = ExceptionTypeListContext;
exports.ExceptionTypeContext = ExceptionTypeContext;
GrammarParser.ExceptionTypeContext = ExceptionTypeContext;
exports.MethodBodyContext = MethodBodyContext;
GrammarParser.MethodBodyContext = MethodBodyContext;
exports.ConstructorDeclarationContext = ConstructorDeclarationContext;
GrammarParser.ConstructorDeclarationContext = ConstructorDeclarationContext;
exports.ConstructorModifierContext = ConstructorModifierContext;
GrammarParser.ConstructorModifierContext = ConstructorModifierContext;
exports.ConstructorDeclaratorContext = ConstructorDeclaratorContext;
GrammarParser.ConstructorDeclaratorContext = ConstructorDeclaratorContext;
exports.ConstructorBodyContext = ConstructorBodyContext;
GrammarParser.ConstructorBodyContext = ConstructorBodyContext;
exports.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext;
GrammarParser.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext;
exports.ArrayInitializerContext = ArrayInitializerContext;
GrammarParser.ArrayInitializerContext = ArrayInitializerContext;
exports.VariableInitializerListContext = VariableInitializerListContext;
GrammarParser.VariableInitializerListContext = VariableInitializerListContext;
exports.BlockContext = BlockContext;
GrammarParser.BlockContext = BlockContext;
exports.LocalVariableDeclarationContext = LocalVariableDeclarationContext;
GrammarParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;
exports.StatementContext = StatementContext;
GrammarParser.StatementContext = StatementContext;
exports.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext;
GrammarParser.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext;
exports.ExpressionStatementContext = ExpressionStatementContext;
GrammarParser.ExpressionStatementContext = ExpressionStatementContext;
exports.StatementExpressionContext = StatementExpressionContext;
GrammarParser.StatementExpressionContext = StatementExpressionContext;
exports.IfStatementContext = IfStatementContext;
GrammarParser.IfStatementContext = IfStatementContext;
exports.WhileStatementContext = WhileStatementContext;
GrammarParser.WhileStatementContext = WhileStatementContext;
exports.ForStatementContext = ForStatementContext;
GrammarParser.ForStatementContext = ForStatementContext;
exports.BreakStatementContext = BreakStatementContext;
GrammarParser.BreakStatementContext = BreakStatementContext;
exports.ContinueStatementContext = ContinueStatementContext;
GrammarParser.ContinueStatementContext = ContinueStatementContext;
exports.ReturnStatementContext = ReturnStatementContext;
GrammarParser.ReturnStatementContext = ReturnStatementContext;
exports.ExpressionContext = ExpressionContext;
GrammarParser.ExpressionContext = ExpressionContext;
exports.AssignmentContext = AssignmentContext;
GrammarParser.AssignmentContext = AssignmentContext;
exports.AssignmentOperatorContext = AssignmentOperatorContext;
GrammarParser.AssignmentOperatorContext = AssignmentOperatorContext;
exports.ConditionalExpressionContext = ConditionalExpressionContext;
GrammarParser.ConditionalExpressionContext = ConditionalExpressionContext;
exports.ConditionalOrExpressionContext = ConditionalOrExpressionContext;
GrammarParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext;
exports.ConditionalAndExpressionContext = ConditionalAndExpressionContext;
GrammarParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext;
exports.RelationalExpressionContext = RelationalExpressionContext;
GrammarParser.RelationalExpressionContext = RelationalExpressionContext;
exports.AdditiveExpressionContext = AdditiveExpressionContext;
GrammarParser.AdditiveExpressionContext = AdditiveExpressionContext;
exports.MultiplicativeExpressionContext = MultiplicativeExpressionContext;
GrammarParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;
exports.UnaryExpressionContext = UnaryExpressionContext;
GrammarParser.UnaryExpressionContext = UnaryExpressionContext;
exports.IncOrDecExpressionContext = IncOrDecExpressionContext;
GrammarParser.IncOrDecExpressionContext = IncOrDecExpressionContext;
exports.MethodInvocationContext = MethodInvocationContext;
GrammarParser.MethodInvocationContext = MethodInvocationContext;
exports.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext;
GrammarParser.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext;
